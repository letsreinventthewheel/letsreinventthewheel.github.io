<?xml version="1.0" encoding="utf-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Let&apos;s Reinvent the Wheel</title><link>https://letsreinventthewheel.github.io</link><description>Let&apos;s Reinvent the Wheel: a companion space to my YouTube channel</description><language>en-us</language><copyright>2025 Let&apos;s Reinvent the Wheel</copyright><managingEditor>letsreinventthewheelyt@gmail.com</managingEditor><webMaster>letsreinventthewheelyt@gmail.com</webMaster><lastBuildDate>Thu, 11 Sep 2025 09:25:11 +0000</lastBuildDate><item><title>Tower Blocks: Episode 3 - UI Animations</title><link>https://letsreinventthewheel.github.io/blog/tower-blocks-ep3</link><description><![CDATA[<p>In previous episode we built the core gameplay: blocks move, players place them and the tower grows.
Now in this episode we focus on polishing the experience by adding smooth text effects: animated score scaling,
overlay fade-ins and sliding titles. It’s all about giving the UI some life and making the game feel responsive and dynamic.</p>
]]></description><author>Kontantin Saveljev</author><guid>https://letsreinventthewheel.github.io/blog/tower-blocks-ep3</guid><pubDate>Thu, 11 Sep 2025 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>In <a href="https://letsreinventthewheel.github.io/blog/tower-blocks-ep2/">Episode 2</a> we implemented the core gameplay loop:
blocks move, you place them, the stack grows and the game ends if you miss.
It works! But it still feels raw. In this episode we begin to polish the experience with animated UI elements.
We add text effects to our overlays and score, introducing smooth transitions that make the game feel responsive and alive.</p>
<hr />
<h2><a href="#what-we-covered" aria-hidden="true" class="anchor" id="what-we-covered"></a>What We Covered</h2>
<ul>
<li>Added scaling animation to the score display (<code>ScoreAnimation</code>)</li>
<li>Implemented fade-in and fade-out transitions for overlays (<code>OverlayAnimation</code>)</li>
<li>Introduced vertical movement for overlay text during fade</li>
<li>Refactored overlay drawing to a generic <code>DrawOverlay()</code> function</li>
<li>Integrated these animations into the game state transitions (start, game over, restart)</li>
</ul>
<hr />
<h2><a href="#design-insights" aria-hidden="true" class="anchor" id="design-insights"></a>Design Insights</h2>
<h3><a href="#why-animate-the-ui" aria-hidden="true" class="anchor" id="why-animate-the-ui"></a>Why Animate the UI?</h3>
<p>Games aren’t just about logic. They are about <strong>feel</strong>. Animating UI text helps:</p>
<ul>
<li>Direct the player’s attention</li>
<li>Provide satisfying feedback</li>
<li>Smooth out transitions between game states</li>
</ul>
<h3><a href="#keeping-it-modular" aria-hidden="true" class="anchor" id="keeping-it-modular"></a>Keeping It Modular</h3>
<p>Instead of hardcoding effects into <code>DrawText()</code>, we created dedicated animation structs:</p>
<ul>
<li><code>ScoreAnimation</code> tracks scaling of the score when a block is placed</li>
<li><code>OverlayAnimation</code> handles alpha and vertical movement of overlays</li>
</ul>
<p>This keeps things clean and reusable for future polish (e.g. easing, spring effects).</p>
<hr />
<h2><a href="#implementation-highlights" aria-hidden="true" class="anchor" id="implementation-highlights"></a>Implementation Highlights</h2>
<h3><a href="#score-pop-animation" aria-hidden="true" class="anchor" id="score-pop-animation"></a>Score Pop Animation</h3>
<p>When a block is placed, we animate the score like this:</p>
<pre class="language-c"><span class="source c">game<span class="punctuation accessor c">-&gt;</span>animations<span class="punctuation accessor c">.</span><span class="variable other member c">score</span><span class="punctuation accessor c">.</span><span class="variable other member c">duration</span> <span class="keyword operator assignment c">=</span> <span class="constant numeric float decimal c">0<span class="punctuation separator decimal c">.</span>2<span class="storage type numeric c">f</span></span><span class="punctuation terminator c">;</span>
game<span class="punctuation accessor c">-&gt;</span>animations<span class="punctuation accessor c">.</span><span class="variable other member c">score</span><span class="punctuation accessor c">.</span><span class="variable other member c">scale</span> <span class="keyword operator assignment c">=</span> <span class="constant numeric float decimal c">1<span class="punctuation separator decimal c">.</span>5<span class="storage type numeric c">f</span></span><span class="punctuation terminator c">;</span>
</span></code></pre>
<p>Each frame:</p>
<pre class="language-c"><span class="source c"><span class="storage type c">float</span> t <span class="keyword operator assignment c">=</span> <span class="constant numeric integer decimal c">1</span> <span class="keyword operator arithmetic c">-</span> duration <span class="keyword operator arithmetic c">/</span> maxDuration<span class="punctuation terminator c">;</span>
score<span class="punctuation accessor c">.</span><span class="variable other member c">scale</span> <span class="keyword operator assignment c">=</span> <span class="meta function-call c"><span class="variable function c">Lerp</span><span class="meta group c"><span class="punctuation section group begin c">(</span></span></span><span class="meta function-call c"><span class="meta group c"><span class="constant numeric float decimal c">1<span class="punctuation separator decimal c">.</span>5<span class="storage type numeric c">f</span></span><span class="punctuation separator c">,</span> <span class="constant numeric float decimal c">1<span class="punctuation separator decimal c">.</span>0<span class="storage type numeric c">f</span></span><span class="punctuation separator c">,</span> t</span></span><span class="meta function-call c"><span class="meta group c"><span class="punctuation section group end c">)</span></span></span><span class="punctuation terminator c">;</span>
</span></code></pre>
<h3><a href="#overlay-fade-and-slide" aria-hidden="true" class="anchor" id="overlay-fade-and-slide"></a>Overlay Fade and Slide</h3>
<p>We animate both <code>alpha</code> and <code>offsetY</code> of overlays:</p>
<pre class="language-c"><span class="source c">overlay<span class="punctuation accessor c">.</span><span class="variable other member c">alpha</span> <span class="keyword operator assignment augmented c">+=</span> dt <span class="keyword operator c">*</span> speed<span class="punctuation terminator c">;</span>
overlay<span class="punctuation accessor c">.</span><span class="variable other member c">offsetY</span> <span class="keyword operator assignment c">=</span> <span class="meta function-call c"><span class="variable function c">Lerp</span><span class="meta group c"><span class="punctuation section group begin c">(</span></span></span><span class="meta function-call c"><span class="meta group c"><span class="keyword operator arithmetic c">-</span><span class="constant numeric integer decimal c">50</span><span class="punctuation separator c">,</span> <span class="constant numeric integer decimal c">0</span><span class="punctuation separator c">,</span> overlay<span class="punctuation accessor c">.</span><span class="variable other member c">alpha</span></span></span><span class="meta function-call c"><span class="meta group c"><span class="punctuation section group end c">)</span></span></span><span class="punctuation terminator c">;</span>
</span></code></pre>
<p>This makes overlays slide in from above while fading in, mimicking web-like transitions (<code>transform: translateY(-50px) scale(1.5)</code> in CSS).</p>
<h3><a href="#unified-overlay-drawing" aria-hidden="true" class="anchor" id="unified-overlay-drawing"></a>Unified Overlay Drawing</h3>
<p>Both the start screen and game over screen use the same generic draw function:</p>
<pre class="language-c"><span class="source c"><span class="storage type c">void</span> <span class="meta function c"><span class="entity name function c">DrawOverlay</span></span><span class="meta function parameters c"><span class="meta group c"><span class="punctuation section group begin c">(</span></span></span><span class="meta function parameters c"><span class="meta group c"><span class="storage modifier c">const</span> Game <span class="keyword operator c">*</span><span class="variable parameter c">game</span><span class="punctuation separator c">,</span> <span class="storage modifier c">const</span> <span class="storage type c">char</span> <span class="keyword operator c">*</span><span class="variable parameter c">title</span><span class="punctuation separator c">,</span> <span class="storage modifier c">const</span> <span class="storage type c">char</span> <span class="keyword operator c">*</span><span class="variable parameter c">subtitle</span><span class="punctuation separator c">,</span> <span class="keyword operator variadic c">...</span><span class="punctuation section group end c">)</span></span></span><span class="punctuation terminator c">;</span>
</span></code></pre>
<p>Cleaner code, fewer branches and easier expansion.</p>
<hr />
<h2><a href="#whats-next" aria-hidden="true" class="anchor" id="whats-next"></a>What’s Next?</h2>
<p>In <a href="https://letsreinventthewheel.github.io/blog/tower-blocks-ep4/">Episode 4</a> we will bring physics into play:</p>
<ul>
<li>Add <strong>falling chopped blocks</strong> when placement isn’t perfect</li>
<li>Simulate simple gravity and spin</li>
<li>Introduce cleanup and lifecycle logic</li>
</ul>
<p>With logic, feedback and animation in place, we are ready to make the game feel truly alive.</p>
<hr />
<h2><a href="#project-code" aria-hidden="true" class="anchor" id="project-code"></a>Project Code</h2>
<p>You will find the complete source code here: <a href="https://github.com/letsreinventthewheel/tower-blocks">tower-blocks</a></p>
]]></content:encoded></item><item><title>Tower Blocks: Episode 2 - Core Game Mechanics</title><link>https://letsreinventthewheel.github.io/blog/tower-blocks-ep2</link><description><![CDATA[<p>In this episode we bring the Tower Blocks game to life by adding core game mechanics: block movement,
stacking logic, placement handling and the essential game loop with win/loss conditions.</p>
]]></description><author>Kontantin Saveljev</author><guid>https://letsreinventthewheel.github.io/blog/tower-blocks-ep2</guid><pubDate>Mon, 01 Sep 2025 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>In <a href="https://letsreinventthewheel.github.io/blog/tower-blocks-ep1/">Episode 1</a> we built a basic 3D scene with stackable blocks. This time we take a huge leap forward
and implement the <strong>core game mechanics</strong> by adding animated block movement, placement logic and a simple win/loss system.</p>
<p>This is where it truly starts to feel like a game.</p>
<hr />
<h2><a href="#what-we-covered" aria-hidden="true" class="anchor" id="what-we-covered"></a>What We Covered</h2>
<ul>
<li>Introduced a <code>GameState</code> enum to manage play flow</li>
<li>Added a moving block that alternates between X and Z axes</li>
<li>Enabled player input to place the block at the right time</li>
<li>Implemented stacking logic with trimming and snapping</li>
<li>Checked for perfect placements and block misses</li>
<li>Introduced placeholder UI for Start/Game Score/Game Over overlays</li>
</ul>
<hr />
<h2><a href="#design-insights" aria-hidden="true" class="anchor" id="design-insights"></a>Design Insights</h2>
<h3><a href="#the-core-loop" aria-hidden="true" class="anchor" id="the-core-loop"></a>The Core Loop</h3>
<p>At the heart of Tower Blocks is the challenge of <strong>timing your placement</strong>. That means we need:</p>
<ul>
<li>A block that moves back and forth</li>
<li>A way to freeze it in place when the player hits space or clicks</li>
<li>Logic to check how well it aligns with the block below</li>
</ul>
<p>This episode introduces all of that, laying the groundwork for later polish like animations, lighting and sound.</p>
<h3><a href="#alternating-axis--instant-variety" aria-hidden="true" class="anchor" id="alternating-axis--instant-variety"></a>Alternating Axis = Instant Variety</h3>
<p>By alternating between X and Z axis movement we make each block a bit trickier to align. A small detail with a big impact on gameplay feel.</p>
<hr />
<h2><a href="#implementation-highlights" aria-hidden="true" class="anchor" id="implementation-highlights"></a>Implementation Highlights</h2>
<h3><a href="#movement-struct" aria-hidden="true" class="anchor" id="movement-struct"></a>Movement Struct</h3>
<p>We defined a <code>Movement</code> struct to encapsulate axis, direction and speed:</p>
<pre class="language-c"><span class="source c"><span class="storage type c">typedef</span> <span class="storage type c">struct</span> <span class="meta block c"><span class="punctuation section block begin c">{</span>
    <span class="storage type c">float</span> speed<span class="punctuation terminator c">;</span>
    Direction direction<span class="punctuation terminator c">;</span>
    Axis axis<span class="punctuation terminator c">;</span>
<span class="punctuation section block end c">}</span></span> <span class="entity name type typedef c">Movement</span><span class="punctuation terminator c">;</span>
</span></code></pre>
<p>Each moving block gets a direction (<code>FORWARD</code> or <code>BACKWARD</code>) and axis (<code>X</code> or <code>Z</code>), and moves between set bounds.</p>
<h3><a href="#placement-logic" aria-hidden="true" class="anchor" id="placement-logic"></a>Placement Logic</h3>
<p>When the player places a block:</p>
<ul>
<li>If it overlaps enough, we trim or snap it.</li>
<li>If it completely misses, it’s game over.</li>
</ul>
<pre class="language-c"><span class="source c"><span class="storage type c">bool</span> <span class="meta function c"><span class="entity name function c">PlaceBlock</span></span><span class="meta function parameters c"><span class="meta group c"><span class="punctuation section group begin c">(</span></span></span><span class="meta function parameters c"><span class="meta group c">Game <span class="keyword operator c">*</span><span class="variable parameter c">game</span><span class="punctuation section group end c">)</span></span></span><span class="meta function c"> </span><span class="meta function c"><span class="meta block c"><span class="punctuation section block begin c">{</span></span></span><span class="meta function c"><span class="meta block c">
    <span class="comment line double-slash c"><span class="punctuation definition comment c">//</span> calculate overlap
</span>    <span class="comment line double-slash c"><span class="punctuation definition comment c">//</span> snap or trim if needed
</span>    <span class="comment line double-slash c"><span class="punctuation definition comment c">//</span> return false if missed
</span></span></span><span class="meta function c"><span class="meta block c"><span class="punctuation section block end c">}</span></span></span>
</span></code></pre>
<h3><a href="#basic-ui-overlays" aria-hidden="true" class="anchor" id="basic-ui-overlays"></a>Basic UI Overlays</h3>
<p>We introduced <code>READY_STATE</code>, <code>PLAYING_STATE</code> and <code>GAME_OVER_STATE</code> and use them to:</p>
<ul>
<li>Show a static “START GAME” title</li>
<li>Show a placeholder game score</li>
<li>Show “GAME OVER” on failure</li>
<li>Let the player restart cleanly</li>
</ul>
<h2><a href="#whats-next" aria-hidden="true" class="anchor" id="whats-next"></a>What’s Next?</h2>
<p>In <a href="https://letsreinventthewheel.github.io/blog/tower-blocks-ep2/">Episode 3</a> we will focus on <strong>polish</strong>:</p>
<ul>
<li>Animate game overlays (start game, game over, game score)</li>
<li>Move camera smoothly instead of snapping to the next position</li>
<li>Start to build out the feel of the game through motion</li>
</ul>
<p>This is where the project goes from <em>working</em> to <em>fun</em>.</p>
<h2><a href="#project-code" aria-hidden="true" class="anchor" id="project-code"></a>Project Code</h2>
<p>You will find the complete source code here: <a href="https://github.com/letsreinventthewheel/tower-blocks">tower-blocks</a></p>
]]></content:encoded></item><item><title>Tower Blocks: Episode 1 - Building the 3D Scene</title><link>https://letsreinventthewheel.github.io/blog/tower-blocks-ep1</link><description><![CDATA[<p>In this episode we set up the foundation for our Tower Blocks game in C using Raylib. We establish
a 3D scene with an orthographic camera, render stackable blocks, implement user input and make the
camera follow the growing tower. Laying the groundwork for future gameplay mechanics.</p>
]]></description><author>Kontantin Saveljev</author><guid>https://letsreinventthewheel.github.io/blog/tower-blocks-ep1</guid><pubDate>Thu, 21 Aug 2025 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>Welcome to the first episode of our Tower Blocks remake using C and Raylib. In this first part we focus on setting the stage for everything to come: creating a clean and minimal 3D environment with blocks, a movable camera and basic input handling.</p>
<hr />
<h2><a href="#what-we-covered" aria-hidden="true" class="anchor" id="what-we-covered"></a>What We Covered</h2>
<ul>
<li>Set up a 3D orthographic camera</li>
<li>Drew a single cube using <code>DrawCube()</code> and <code>DrawCubeWires()</code></li>
<li>Created a simple <code>Block</code> struct to represent stackable game blocks</li>
<li>Implemented input handling to spawn new blocks</li>
<li>Automatically adjusted the camera upward as the stack grows</li>
</ul>
<p>This foundational work gives us a visually engaging stack of blocks and a working 3D scene that is interactive right out of the gate.</p>
<hr />
<h2><a href="#design-insights" aria-hidden="true" class="anchor" id="design-insights"></a>Design Insights</h2>
<h3><a href="#a-3d-game-doesnt-have-to-be-complex" aria-hidden="true" class="anchor" id="a-3d-game-doesnt-have-to-be-complex"></a>A 3D Game Doesn’t Have to Be Complex</h3>
<p>One of the goals of this series is to show how you can build meaningful and visual gameplay without needing a full engine. Raylib gives you a simple 3D API that’s ideal for building things step by step.</p>
<h3><a href="#stacking-is-visually-rewarding" aria-hidden="true" class="anchor" id="stacking-is-visually-rewarding"></a>Stacking is Visually Rewarding</h3>
<p>Even with no animations, physics or scoring, the act of stacking blocks and watching them climb the screen feels satisfying. That’s a signal we are on the right track and a good foundation for expanding mechanics.</p>
<hr />
<h2><a href="#implementation-highlights" aria-hidden="true" class="anchor" id="implementation-highlights"></a>Implementation Highlights</h2>
<h3><a href="#block-struct" aria-hidden="true" class="anchor" id="block-struct"></a>Block Struct</h3>
<p>We use a basic struct to represent a block’s position, size and color:</p>
<pre class="language-c"><span class="source c"><span class="storage type c">typedef</span> <span class="storage type c">struct</span> <span class="meta block c"><span class="punctuation section block begin c">{</span>
    Vector3 position<span class="punctuation terminator c">;</span>
    Vector3 size<span class="punctuation terminator c">;</span>
    Color color<span class="punctuation terminator c">;</span>
<span class="punctuation section block end c">}</span></span> <span class="entity name type typedef c">Block</span><span class="punctuation terminator c">;</span>
</span></code></pre>
<p>Each new block is based on a <code>default_block</code>, with its Y-position offset by its index in the stack and its color slightly adjusted.</p>
<h3><a href="#dynamic-block-array" aria-hidden="true" class="anchor" id="dynamic-block-array"></a>Dynamic Block Array</h3>
<p>We use <code>stb_ds.h</code> to maintain a dynamically growing array of placed blocks:</p>
<pre class="language-c"><span class="source c">Block <span class="keyword operator c">*</span>placed_blocks <span class="keyword operator assignment c">=</span> nullptr<span class="punctuation terminator c">;</span>
<span class="meta function-call c"><span class="variable function c">arrpush</span><span class="meta group c"><span class="punctuation section group begin c">(</span></span></span><span class="meta function-call c"><span class="meta group c">placed_blocks<span class="punctuation separator c">,</span> newBlock</span><span class="meta group c"><span class="punctuation section group end c">)</span></span></span><span class="punctuation terminator c">;</span>
</span></code></pre>
<h3><a href="#camera-tracking" aria-hidden="true" class="anchor" id="camera-tracking"></a>Camera Tracking</h3>
<p>Each time a block is added we reposition the camera to track the top of the tower:</p>
<pre class="language-c"><span class="source c">camera<span class="punctuation accessor c">-&gt;</span>position<span class="punctuation accessor c">.</span><span class="variable other member c">y</span> <span class="keyword operator assignment c">=</span> <span class="constant numeric integer decimal c">50</span> <span class="keyword operator arithmetic c">+</span> <span class="constant numeric integer decimal c">2</span> <span class="keyword operator c">*</span> placed_blocks_count<span class="punctuation terminator c">;</span>
camera<span class="punctuation accessor c">-&gt;</span>target<span class="punctuation accessor c">.</span><span class="variable other member c">y</span> <span class="keyword operator assignment c">=</span> <span class="constant numeric integer decimal c">2</span> <span class="keyword operator c">*</span> placed_blocks_count<span class="punctuation terminator c">;</span>
</span></code></pre>
<p>This gives the impression of infinite vertical growth.</p>
<hr />
<h2><a href="#whats-next" aria-hidden="true" class="anchor" id="whats-next"></a>What’s Next?</h2>
<p>In the <a href="https://letsreinventthewheel.github.io/blog/tower-blocks-ep2/">next episode</a> we will give the player something to do. We’ll introduce the <strong>moving block mechanic</strong>.</p>
<ul>
<li>The block will slide in from one side</li>
<li>We will alternate movement direction along X and Z axes</li>
<li>The player will time their placement with a press</li>
<li>We will start building toward actual gameplay</li>
</ul>
<p>From here the project becomes a lot more dynamic and game-like.</p>
<h2><a href="#project-code" aria-hidden="true" class="anchor" id="project-code"></a>Project Code</h2>
<p>You will find the complete source code here: <a href="https://github.com/letsreinventthewheel/tower-blocks">tower-blocks</a></p>
]]></content:encoded></item><item><title>Snake Rewind: Episode 8 - Visual Glitchcraft</title><link>https://letsreinventthewheel.github.io/blog/snake-rewind-ep8</link><description><![CDATA[<p>In this episode we dive into retro inspired shader effects: scanlines, flicker, distortion and
chromatic aberration. This gives our Snake Rewind the look and feel of a glitched out arcade display.</p>
]]></description><author>Kontantin Saveljev</author><guid>https://letsreinventthewheel.github.io/blog/snake-rewind-ep8</guid><pubDate>Thu, 14 Aug 2025 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>In our final Episode 8 of the Snake Rewind devlog we dive deep into postprocessing effects to give our game a full retro CRT vibe. From scanlines and flicker to distortion and RGB channel splitting, this episode brings raw visual style to the grid.</p>
<h2><a href="#what-we-covered" aria-hidden="true" class="anchor" id="what-we-covered"></a>What We Covered</h2>
<ul>
<li>Implemented animated <strong>scanlines</strong> with configurable frequency and opacity</li>
<li>Added subtle <strong>light flicker</strong> for a dynamic CRT shimmer</li>
<li>Applied sine based <strong>screen distortion</strong> to simulate signal warping</li>
<li>Built a <strong>chromatic aberration</strong> shader (chromasep) to split RGB channels</li>
</ul>
<p>This episode is all about turning the clean pixel grid into something with personality: unstable, glitchy and wonderfully retro.</p>
<h2><a href="#design-insights" aria-hidden="true" class="anchor" id="design-insights"></a>Design Insights</h2>
<ul>
<li>Scanlines are a sine modulation on brightness based on <code>fragTexCoord.y</code></li>
<li>Flicker is time based and global, modulating brightness subtly</li>
<li>Distortion uses UV displacement with sine waves for wobbly lines</li>
<li>Chromasep offsets the red and blue channels using a randomized <code>distortion</code></li>
<li>Effects are layered in order: base scene → glow → scanlines → distortion → chromasep</li>
</ul>
<h2><a href="#implementation-highlights" aria-hidden="true" class="anchor" id="implementation-highlights"></a>Implementation Highlights</h2>
<ul>
<li>This episode’s effects all reside in <code>scanline.glsl</code> shader</li>
<li>Used <code>globalTimer</code> utilizing <code>GetFrameTime()</code> to animate phase and flicker over time</li>
<li>Used a temporary <code>RenderTexture2D</code> to chain passes cleanly</li>
<li>Composited the final output directly to the screen</li>
</ul>
<h2><a href="#external-resources" aria-hidden="true" class="anchor" id="external-resources"></a>External Resources</h2>
<ul>
<li><a href="https://agatedragon.blog/2024/01/26/shadertoy-scanline/">Creating a scanline effect in Shadertoy</a> - initial source for scanline shader, but we built our own thing</li>
<li><a href="https://mini.gmshaders.com/p/gm-shaders-mini-chromatic-aberration">Mini: Chromatic Aberration</a></li>
</ul>
<h2><a href="#tweak-and-expand" aria-hidden="true" class="anchor" id="tweak-and-expand"></a>Tweak and Expand</h2>
<ul>
<li>Add background music and sound effects (based on free assets). I will gladly merge your PR if you would like to contribute.</li>
<li>Clean up the main file and split relevant functionality to specialized header/implementation files</li>
<li>Extract some parameters from shaders as uniforms and configured them from our <code>main</code></li>
<li>Add any other effects you think will make the game look even better!</li>
</ul>
]]></content:encoded></item><item><title>Snake Rewind: Episode 7 - Shine On</title><link>https://letsreinventthewheel.github.io/blog/snake-rewind-ep7</link><description><![CDATA[<p>In this episode we give Snake Rewind its first post processing effect: a glowing bloom shader
that adds depth, atmosphere and a retro arcade vibe to the entire game.</p>
]]></description><author>Kontantin Saveljev</author><guid>https://letsreinventthewheel.github.io/blog/snake-rewind-ep7</guid><pubDate>Thu, 07 Aug 2025 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>In Episode 7 of the Snake Rewind devlog we step into post processing territory and bring our retro grid to life with a glowing <strong>bloom shader</strong>. Based on LearnOpenGL’s bloom effect tutorial, we implement a multi pass blur system that highlights bright pixels and makes every move feel just a bit more cinematic.</p>
<h2><a href="#what-we-covered" aria-hidden="true" class="anchor" id="what-we-covered"></a>What We Covered</h2>
<ul>
<li>Implemented a multi pass bloom/glow shader:
<ol>
<li>Brightness threshold</li>
<li>Horizontal blur</li>
<li>Vertical blur</li>
</ol>
</li>
<li>Applied additive blending to layer the glow over the original scene</li>
<li>Used flipped source rectangles to correct Y-axis rendering (Raylib/OpenGL quirk)</li>
<li>Tuned glow strength with opacity and blur spread</li>
</ul>
<p>With this effect in place Snake Rewind now looks like an arcade game in a neon dream and the groundwork is laid for more shader polish to come.</p>
<h2><a href="#design-insights" aria-hidden="true" class="anchor" id="design-insights"></a>Design Insights</h2>
<ul>
<li>Raylib’s render textures are vertically flipped by default: fix with <code>src.height = -HEIGHT</code></li>
<li>Threshold pass helps isolate which pixels should glow (based on luminance)</li>
<li>Separable Gaussian blur (horizontal + vertical) is performant and visually clean</li>
<li>Applying Gaussian blur multiple times gives a more defined and spread blur</li>
</ul>
<h2><a href="#implementation-highlights" aria-hidden="true" class="anchor" id="implementation-highlights"></a>Implementation Highlights</h2>
<ul>
<li>Custom <code>threshold.glsl</code> and <code>blur.glsl</code> shaders in GLSL 330</li>
<li>Multiple <code>RenderTexture2D</code> buffers: <code>target</code>, <code>tmpA</code>, <code>tmpB</code> and <code>blurred</code></li>
<li>Ping pong render strategy to apply blur passes cleanly</li>
</ul>
<h2><a href="#why-this-matters" aria-hidden="true" class="anchor" id="why-this-matters"></a>Why This Matters</h2>
<p>Visuals matter and even a simple game like Snake gains <strong>impact</strong> and <strong>atmosphere</strong> when it glows in the right places. Our glow shader sets the tone for future effects like scanlines and chromasep.</p>
<h2><a href="#external-resources" aria-hidden="true" class="anchor" id="external-resources"></a>External Resources</h2>
<ul>
<li><a href="https://learnopengl.com/Advanced-Lighting/Bloom">LearnOpenGL.com: Bloom</a> - our main source for implemetation of bloom/glow shader</li>
</ul>
<h2><a href="#whats-next" aria-hidden="true" class="anchor" id="whats-next"></a>What’s Next?</h2>
<p>In <a href="https://letsreinventthewheel.github.io/blog/snake-rewind-ep8/">Episode 8</a> we’ll dial in the retro feel even further with animated <strong>scanlines</strong> giving our game the look of a vintage CRT arcade screen.</p>
]]></content:encoded></item><item><title>Snake Rewind: Episode 6 - Flashy Feedback</title><link>https://letsreinventthewheel.github.io/blog/snake-rewind-ep6</link><description><![CDATA[<p>In this episode we bring the score display to life with animated scaling and rotation. We add
a satisfying visual feedback every time the player eats food and grows the snake.</p>
]]></description><author>Kontantin Saveljev</author><guid>https://letsreinventthewheel.github.io/blog/snake-rewind-ep6</guid><pubDate>Wed, 06 Aug 2025 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>In Episode 6 of the Snake Rewind devlog we add a small feature that makes a <strong>huge difference</strong>: animated score text. With just a bit of scaling, rotation and timing our static “LENGTH: N” label becomes a punchy, reactive UI element that enhances the entire game feel.</p>
<h2><a href="#what-we-covered" aria-hidden="true" class="anchor" id="what-we-covered"></a>What We Covered</h2>
<ul>
<li>Added a <code>&quot;LENGTH: N&quot;</code> score label using the arcade font at size 32</li>
<li>Positioned it top center and adjusted for pixel alignment</li>
<li>Applied <strong>animated scaling and rotation</strong> when the score increases</li>
<li>Reset the animation using a timer and <code>lerp</code> to bring it back to normal</li>
<li>Ensured the visual feedback is tied directly to game events (eating food)</li>
</ul>
<p>This kind of micro feedback is what makes Snake Rewind feel responsive and alive.</p>
<h2><a href="#design-insights" aria-hidden="true" class="anchor" id="design-insights"></a>Design Insights</h2>
<ul>
<li>UI animations can be small but impactful when timed to player actions</li>
<li>Text drawing in Raylib requires extra care with alignment (top-left anchor)</li>
<li><code>rlPushMatrix()</code> / <code>rlScalef()</code> / <code>rlRotatef()</code> give you flexible per element transforms</li>
<li>Using a center aligned origin lets you animate from the middle of the text</li>
</ul>
<h2><a href="#implementation-highlights" aria-hidden="true" class="anchor" id="implementation-highlights"></a>Implementation Highlights</h2>
<ul>
<li><code>DrawTextEx()</code> for rendering custom fonts</li>
<li>Manual origin correction so animations pivot around center</li>
<li>A <code>scoreEffect.duration</code> variable drives animation timing</li>
<li>Lerp used to ease <code>scale</code> and <code>angle</code> back to normal over 0.3s</li>
</ul>
<h2><a href="#why-this-matters" aria-hidden="true" class="anchor" id="why-this-matters"></a>Why This Matters</h2>
<p>UI feedback like this makes eating food <em>feel good</em>. The moment you grow, the score text pops and wiggles. It’s subtle, satisfying and immediate. And it’s one of the common steps when building juicy and responsive gameplay.</p>
<h2><a href="#whats-next" aria-hidden="true" class="anchor" id="whats-next"></a>What’s Next?</h2>
<p>In <a href="https://letsreinventthewheel.github.io/blog/snake-rewind-ep7/">Episode 7</a> we’ll start layering on shader based postprocessing. We’ll begin with a glowing bloom effect that makes our game world shine.</p>
]]></content:encoded></item><item><title>Snake Rewind: Episode 5 - Snake Ends Here</title><link>https://letsreinventthewheel.github.io/blog/snake-rewind-ep5</link><description><![CDATA[<p>In this episode we complete the core gameplay loop by adding collision detection, game over
logic and a restart system. Thus giving the player something to fear and the game real stakes.</p>
]]></description><author>Kontantin Saveljev</author><guid>https://letsreinventthewheel.github.io/blog/snake-rewind-ep5</guid><pubDate>Thu, 31 Jul 2025 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>In <a href="https://letsreinventthewheel.github.io/blog/snake-rewind-ep4/">previous episode</a> we introduced clones that retrace your every move. This added tension to each step. Now, in Episode 5, we complete the core gameplay loop by introducing <strong>collision detection</strong>, <strong>game over logic</strong> and a <strong>restart flow</strong>. Thus giving the game consequence and closure.</p>
<h2><a href="#what-we-covered" aria-hidden="true" class="anchor" id="what-we-covered"></a>What We Covered</h2>
<ul>
<li>Implemented <strong>self collision</strong>: player dies when colliding with their own body</li>
<li>Added <strong>clone collision</strong>: player dies when colliding with enemy body</li>
<li>Created a <strong>game over state</strong> that freezes player input and movement</li>
<li>Clones continue moving after game over for visual payoff</li>
<li>Displayed a <strong>“GAME OVER” message</strong> and a <strong>“Press Enter to Restart”</strong> prompt</li>
<li>Reset the game cleanly on restart with full state reinitialization</li>
<li>Animation of Game Over overlay (scale and shake)</li>
</ul>
<p>This episode gives the player something to fear and a reason to come back for more.</p>
<h2><a href="#design-insights" aria-hidden="true" class="anchor" id="design-insights"></a>Design Insights</h2>
<ul>
<li>Used <code>game.game_over</code> to gate logic and animation cleanly</li>
<li>Kept clone motion running after game over for stylistic contrast</li>
<li>Game over UI was rendered directly into the framebuffer for visual consistency</li>
<li>Cleaned up state via a <code>RestartGame()</code>, handling all resets</li>
<li>Basic <code>ScaleEffect</code> and <code>ShakeEffect</code> for game over overlay</li>
</ul>
<h2><a href="#implementation-highlights" aria-hidden="true" class="anchor" id="implementation-highlights"></a>Implementation Highlights</h2>
<ul>
<li>Collision detection happens right after <code>SnakeDoStep()</code> (and related clone spawning / reducing)</li>
<li><code>game.game_over = true</code> halts all player behavior</li>
<li>Grid fades, scales and shakes using simple timer based animation</li>
<li>Restart prompt uses Raylib input to detect <code>KEY_ENTER</code> and resets the scene</li>
<li><code>ScaleEffect</code> instantly increased size of rendered framebuffer and linearly decreases it to normal size</li>
<li><code>ShakeEffect</code> is a very basic thing that simply randomly displaces the framebuffer horizontally and vertically</li>
</ul>
<h2><a href="#gameplay-impact" aria-hidden="true" class="anchor" id="gameplay-impact"></a>Gameplay Impact</h2>
<p>This is the point where Snake Rewind becomes a game and not just a system. Every food pickup is now a calculated risk, every movement is a step toward survival or doom. The game punishes you for being predictable and rewards smart pathing.</p>
<h2><a href="#whats-next" aria-hidden="true" class="anchor" id="whats-next"></a>What’s Next?</h2>
<p>In <a href="https://letsreinventthewheel.github.io/blog/snake-rewind-ep6/">Episode 6</a> we will work on <strong>score display</strong> and feedback, laying the groundwork for juicy UI and animated responses to player progress.</p>
]]></content:encoded></item><item><title>Snake Rewind: Episode 4 - Past Self, Present Danger</title><link>https://letsreinventthewheel.github.io/blog/snake-rewind-ep4</link><description><![CDATA[<p>In this episode we introduce the clone mechanic: snakes that replay your past moves with
deadly precision. It is a strategic twist that transforms Snake Rewind from a simple remake
into a tactical survival challenge.</p>
]]></description><author>Kontantin Saveljev</author><guid>https://letsreinventthewheel.github.io/blog/snake-rewind-ep4</guid><pubDate>Tue, 29 Jul 2025 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>In <a href="https://letsreinventthewheel.github.io/blog/snake-rewind-ep3/">previous episode</a> we gave our snake a purpose: food, growth and the beginnings of a real challenge. Now, in Episode 4, that challenge turns inward. We are introducing a brand new threat: <strong>yourself</strong>! or rather your past self. This is where the clone mechanic comes into play.</p>
<h2><a href="#what-we-covered" aria-hidden="true" class="anchor" id="what-we-covered"></a>What We Covered</h2>
<ul>
<li>Introduced a <strong>global <code>player_path</code> array</strong> to store the player’s movement history</li>
<li>Added the ability to spawn <strong>clones</strong> that replay the player’s path</li>
<li>Made each clone operate on a delay using a <code>player_path_idx</code> index into the <code>player_path</code> array</li>
<li>Created a <code>SnakeClone</code> struct wrapping a <code>Snake</code> with extra data</li>
<li>Implemented per step logic to grow and animate clones independently</li>
<li>Added clone decay: every time the player eats food all existing clones shrink by one segment and are removed when they reach length zero</li>
</ul>
<p>Every time the player eats food a new clone spawns and begins to <strong>trace the player’s old footsteps</strong>. It’s deterministic, clean and eerily effective at making the player fear their own past.</p>
<h2><a href="#design-insights" aria-hidden="true" class="anchor" id="design-insights"></a>Design Insights</h2>
<ul>
<li>Clones move based on positions from the <code>player_path</code> array</li>
<li>The player’s path is updated every movement tick</li>
<li>All clones are stored in a simple array, updated alongside the player</li>
</ul>
<h2><a href="#implementation-highlights" aria-hidden="true" class="anchor" id="implementation-highlights"></a>Implementation Highlights</h2>
<ul>
<li><code>SnakeClone</code> = <code>Snake</code> + <code>player_path_idx</code></li>
<li><code>Position *player_path</code> stores every step the player takes</li>
<li>On food pickup: spawn new clone, set <code>player_path_idx = 0</code> and add to <code>game.clones</code></li>
<li>Also on food pickup: reduce all existing clones’ length by 1</li>
<li>During update: clones follow the path, shift their own tiles and draw as usual</li>
</ul>
<h2><a href="#gameplay-impact" aria-hidden="true" class="anchor" id="gameplay-impact"></a>Gameplay Impact</h2>
<p>This is the moment where Snake Rewind becomes more than a remake. It is now a strategy game about space, timing and memory. Clones create <strong>risk zones</strong> and slowly turn the grid into a trap.</p>
<h2><a href="#acknowledgements" aria-hidden="true" class="anchor" id="acknowledgements"></a>Acknowledgements</h2>
<p><a href="https://sheepolution.itch.io/snake-snake-snake">Snake Snake Snake</a> - Original idea of a Snake clone</p>
<h2><a href="#whats-next" aria-hidden="true" class="anchor" id="whats-next"></a>What’s Next?</h2>
<p>In <a href="https://letsreinventthewheel.github.io/blog/snake-rewind-ep5/">Episode 5</a> we’ll tie this mechanic into the game loop by implementing <strong>collision detection</strong>, game over logic and a retry prompt - completing the core loop.</p>
]]></content:encoded></item><item><title>Snake Rewind: Episode 3 - Feeding the Beast</title><link>https://letsreinventthewheel.github.io/blog/snake-rewind-ep3</link><description><![CDATA[<p>In this episode we introduce food to the game allowing the snake to grow and bringing
the core gameplay loop to life. It’s a small change that makes a big difference and sets
the stage for the clone mechanic coming next.</p>
]]></description><author>Kontantin Saveljev</author><guid>https://letsreinventthewheel.github.io/blog/snake-rewind-ep3</guid><pubDate>Wed, 23 Jul 2025 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>In <a href="https://letsreinventthewheel.github.io/blog/snake-rewind-ep3/">Episode 3</a> of the Snake Rewind devlog we finally give our snake something to chase: food. This episode introduces the core gameplay loop: moving, eating and growing; and makes the game feel alive for the first time.</p>
<h2><a href="#what-we-covered" aria-hidden="true" class="anchor" id="what-we-covered"></a>What We Covered</h2>
<ul>
<li>Implemented a simple <strong>Food</strong> system that spawns randomly on the grid</li>
<li>Ensured food only appears on empty (non snake) tiles</li>
<li>Checked for <strong>head-to-food collision</strong> during the update step</li>
<li>Triggered <strong>snake growth</strong> when food is eaten</li>
<li>Refactored movement to support dynamic length</li>
</ul>
<p>This introduces the feedback loop that makes Snake a game: player makes a move, something happens and the game state evolves.</p>
<h2><a href="#design-insights" aria-hidden="true" class="anchor" id="design-insights"></a>Design Insights</h2>
<ul>
<li>Food spawn logic uses a retry loop until it finds an empty tile (simple and effective)</li>
<li>Snake growth is handled by <strong>increasing its length</strong>, allowing it to retain more of its trail</li>
<li>Grid based collision checking is fast and intuitive with our tile system</li>
<li>This sets up the perfect path for spawning <strong>clones</strong> in the next episode</li>
</ul>
<h2><a href="#implementation-highlights" aria-hidden="true" class="anchor" id="implementation-highlights"></a>Implementation Highlights</h2>
<ul>
<li><code>Food</code> struct stores position and tile value</li>
<li>Collision check is done right after <code>SnakeDoStep()</code></li>
<li>Snake <code>tiles</code> controls growth (no need for timers or delayed flags)</li>
<li>Food respawns instantly after being eaten</li>
</ul>
<h2><a href="#acknowledgements" aria-hidden="true" class="anchor" id="acknowledgements"></a>Acknowledgements</h2>
<p><a href="https://sheepolution.itch.io/snake-snake-snake">Snake Snake Snake</a> - Original idea of a Snake clone</p>
<h2><a href="#whats-next" aria-hidden="true" class="anchor" id="whats-next"></a>What’s Next?</h2>
<p>In <a href="https://letsreinventthewheel.github.io/blog/snake-rewind-ep4/">Episode 4</a> the past catches up - literally. We’ll implement <strong>clones</strong> that retrace your exact path, adding challenge and strategy to what was once just survival.</p>
]]></content:encoded></item><item><title>Snake Rewind: Episode 2 - Slither With Style</title><link>https://letsreinventthewheel.github.io/blog/snake-rewind-ep2</link><description><![CDATA[<p>In this episode we breathe life into the grid by implementing smooth step based snake
movement and clean keyboard input handling - laying the groundwork for gameplay mechanics
to come.</p>
]]></description><author>Kontantin Saveljev</author><guid>https://letsreinventthewheel.github.io/blog/snake-rewind-ep2</guid><pubDate>Mon, 21 Jul 2025 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>In this second entry of the <strong>Snake Rewind</strong> devlog series we bring the grid to life. We are adding player controlled snake movement using step based logic and clean keyboard input handling.</p>
<h2><a href="#what-we-covered" aria-hidden="true" class="anchor" id="what-we-covered"></a>What We Covered</h2>
<ul>
<li>Implemented <strong>grid based movement</strong> that updates on a fixed timer interval</li>
<li>Handled directional input with <strong>arrow keys</strong> including turn buffering</li>
<li>Kept the snake moving smoothly in one direction until a valid turn is made</li>
<li>Introduced a simple <code>Snake</code> struct to track position, direction and tiles</li>
<li>Laid the foundation for growing the snake and introducing game mechanics</li>
</ul>
<p>Instead of animating per frame we step the snake every 100 milliseconds. This keeps gameplay deterministic and perfectly grid aligned.</p>
<h2><a href="#design-highlights" aria-hidden="true" class="anchor" id="design-highlights"></a>Design Highlights</h2>
<ul>
<li>Movement is time based, not tied to framerate (fps)</li>
<li>Turns are buffered when valid, preventing 180° reversals</li>
<li>Snake wraps around screen edges</li>
<li>Directional input is decoupled from movement logic</li>
</ul>
<h2><a href="#lessons-learned" aria-hidden="true" class="anchor" id="lessons-learned"></a>Lessons Learned</h2>
<ul>
<li>Separating input handling from movement updates keeps logic clean</li>
<li>Using a <code>stepTimer</code> helps us keep gameplay speed consistent and independent of framerate (fps)</li>
<li>Representing the snake as a list of tiles (with the head always at index 0) makes future logic (collision, food, clones) simple and predictable</li>
</ul>
<h2><a href="#acknowledgements" aria-hidden="true" class="anchor" id="acknowledgements"></a>Acknowledgements</h2>
<p><a href="https://sheepolution.itch.io/snake-snake-snake">Snake Snake Snake</a> - Original idea of a Snake clone</p>
<h2><a href="#whats-next" aria-hidden="true" class="anchor" id="whats-next"></a>What’s Next?</h2>
<p>In <a href="https://letsreinventthewheel.github.io/blog/snake-rewind-ep3/">Episode 3</a> we’ll add the <strong>food system</strong> and make the snake grow when it eats, setting the stage for our clone mechanic to follow.</p>
]]></content:encoded></item><item><title>Snake Rewind: Episode 1 - Gridlocked Pixels</title><link>https://letsreinventthewheel.github.io/blog/snake-rewind-ep1</link><description><![CDATA[<p>In the first episode of Snake Rewind we lay the groundwork for a retro inspired Snake
game by building a crisp pixel perfect tile grid using Raylib. This foundational system
sets the stage for everything to come: from clone mechanics to shader powered visuals.</p>
]]></description><author>Kontantin Saveljev</author><guid>https://letsreinventthewheel.github.io/blog/snake-rewind-ep1</guid><pubDate>Fri, 18 Jul 2025 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>Welcome to the <strong>first devlog entry</strong> for <em>Snake Rewind</em>: a retro inspired, shader fueled twist on the classic Snake game built using <strong>Raylib</strong> in <strong>C</strong>.</p>
<h2><a href="#what-we-covered" aria-hidden="true" class="anchor" id="what-we-covered"></a>What We Covered</h2>
<p>In Episode 1 we focused on building the <strong>pixel perfect game grid</strong> that powers everything in Snake Rewind:</p>
<ul>
<li>Setting up a fixed resolution <strong>framebuffer</strong></li>
<li>Rendering a tile based grid that snaps to pixel coordinates</li>
<li>Drawing each tile with per cell logic</li>
<li>Preparing a solid canvas for shaders, clones and mechanics coming up in future episodes</li>
</ul>
<p>This grid isn’t just a background. It’s the foundation for the snake, the food, the clones and every visual effect we’ll be layering on top.
Getting it right at the start means everything stays crisp and deterministic across all resolutions.</p>
<h2><a href="#why-this-matters" aria-hidden="true" class="anchor" id="why-this-matters"></a>Why This Matters</h2>
<p>Snake Rewind isn’t just a remake. It’s a step up. We’re building this from scratch but pushing it far past beginner level by integrating:</p>
<ul>
<li><strong>Clone mechanics</strong> (your past self becomes your enemy)</li>
<li><strong>Bloom and glow effects</strong></li>
<li><strong>Retro scanlines and chromatic aberration</strong></li>
<li><strong>Dynamic, reactive UI and juicy feedback</strong></li>
<li><strong>Cinematic shaders and sound polish</strong> (hopefully)</li>
</ul>
<p>But it all starts with one thing: a clean, scalable and pixel perfect grid.</p>
<h2><a href="#code-highlights" aria-hidden="true" class="anchor" id="code-highlights"></a>Code Highlights</h2>
<p>You’ll find the complete source code here: <a href="https://github.com/letsreinventthewheel/snake-rewind">snake-rewind</a></p>
<ul>
<li><code>RenderTexture2D</code> with internal game resolution</li>
<li>Tile size + spacing logic for predictable layout</li>
<li>Origin offset and centering math for visual balance</li>
<li>Foundation for post processing shaders</li>
</ul>
<h2><a href="#acknowledgements" aria-hidden="true" class="anchor" id="acknowledgements"></a>Acknowledgements</h2>
<p><a href="https://sheepolution.itch.io/snake-snake-snake">Snake Snake Snake</a> - Original idea of a Snake clone</p>
<h2><a href="#whats-next" aria-hidden="true" class="anchor" id="whats-next"></a>What’s Next?</h2>
<p>In <a href="https://letsreinventthewheel.github.io/blog/snake-rewind-ep2/">Episode 2</a> we’ll make the grid come alive by implementing <strong>snake movement</strong> and <strong>input handling</strong>.
Get ready to slither, wrap and eventually grow.</p>
]]></content:encoded></item><item><title>Quadtree Art, Part 3: Prioritized Subdivision with Binary Heap</title><link>https://letsreinventthewheel.github.io/blog/quadtree-art-part3-heap</link><description><![CDATA[<p>In this final part we introduce a priority queue to guide image subdivision based on color
error and area. The result is a smarter and faster rendering process that focuses effort
where it visually matters most.</p>
]]></description><author>Kontantin Saveljev</author><guid>https://letsreinventthewheel.github.io/blog/quadtree-art-part3-heap</guid><pubDate>Fri, 11 Jul 2025 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p><a href="https://letsreinventthewheel.github.io/blog/quadtree-art-part2-linear/">Previously</a> we built a basic subdivision system that linearly split image regions using a dynamic array. While it worked visually, it treated all quads equally (regardless of how much visual detail they contained).</p>
<p>In this final part we fix the biggest issue: treating all quads equally.</p>
<p>We introduce a <strong>priority queue</strong> using a minimum heap that scores each quad based on color error and area. This allows us to render the image more intelligently, refining the most visually important regions first.</p>
<hr />
<h2><a href="#what-youll-learn" aria-hidden="true" class="anchor" id="what-youll-learn"></a>What You’ll Learn</h2>
<ul>
<li>How to implement a min-heap using <code>stb_ds</code> dynamic arrays</li>
<li>How to define a score based on color error and region area</li>
<li>How to use the heap to always split the most important quad next</li>
<li>How this small change results in better visual quality</li>
<li>How to limit window size for large images while keeping aspect ratio</li>
</ul>
<hr />
<h2><a href="#what-it-does" aria-hidden="true" class="anchor" id="what-it-does"></a>What It Does</h2>
<ul>
<li>Each quad gets a score:
<pre><span class="text plain">score = -error × (area ** 0.25) + (is_leaf ? 1000000 : 0)
</span></code></pre>
</li>
<li>Quads are stored in a min-heap based on this score</li>
<li>On each key press, the highest priority quad is split</li>
<li>The image now refines in a structured and intentional way</li>
</ul>
<hr />
<h2><a href="#why-it-works-better" aria-hidden="true" class="anchor" id="why-it-works-better"></a>Why It Works Better</h2>
<ul>
<li>Large and high-error regions get split first</li>
<li>Flat or tiny regions are ignored or delayed</li>
<li>Rendering looks smarter and converges faster</li>
<li>Visually the image appears to “come into focus”</li>
</ul>
<hr />
<h2><a href="#project-code" aria-hidden="true" class="anchor" id="project-code"></a>Project Code</h2>
<p>You will find the complete source code here: <a href="https://github.com/letsreinventthewheel/quadtree-art">quadtree-art</a></p>
<hr />
<h2><a href="#final-thoughts" aria-hidden="true" class="anchor" id="final-thoughts"></a>Final Thoughts</h2>
<p>What began as a simple recursive drawing routine is now a guided and error aware rendering system. This last step feels like the quadtree is actively <em>seeing</em>: prioritizing what deserves detail.</p>
<p>A small data structure change, a big leap in clarity.</p>
<hr />
<h2><a href="#external-resources" aria-hidden="true" class="anchor" id="external-resources"></a>External Resources</h2>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Binary_heap">Binary Heap</a></li>
<li><a href="https://www.youtube.com/watch?v=koyuy564TZ8">A&amp;DS S01E02. Data structures. Binary Heap. Heap sort</a></li>
</ul>
<h2><a href="#acknowledgements" aria-hidden="true" class="anchor" id="acknowledgements"></a>Acknowledgements</h2>
<ul>
<li><a href="https://github.com/fogleman/Quads">Quads by Michael Fogleman</a> - original idea</li>
</ul>
]]></content:encoded></item><item><title>Quadtree Art, Part 2: Linear Subdivision with Quads</title><link>https://letsreinventthewheel.github.io/blog/quadtree-art-part2-linear</link><description><![CDATA[<p>We implement basic image subdivision using a dynamic array to manage quads. The result
looks interesting but without prioritization we end up spending time on regions that
barely matter. This part sets the stage for a smarter approach in Part 3.</p>
]]></description><author>Kontantin Saveljev</author><guid>https://letsreinventthewheel.github.io/blog/quadtree-art-part2-linear</guid><pubDate>Tue, 08 Jul 2025 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p><a href="https://letsreinventthewheel.github.io/blog/quadtree-art-part1-sdl/">With the SDL and framebuffer setup in place</a> we now dive into subdividing the image.</p>
<p>In this second part we build a basic quadtree system using a dynamic array (essentially a queue). Each quad is subdivided into four children and those are appended to the array.</p>
<hr />
<h2><a href="#what-youll-learn" aria-hidden="true" class="anchor" id="what-youll-learn"></a>What You’ll Learn</h2>
<ul>
<li>How to define and manage quads covering image regions</li>
<li>How to compute RGB histograms and calculate average color and error</li>
<li>How to split image regions recursively using a dynamic array (via <code>stb_ds.h</code>)</li>
<li>Why naive non-prioritized subdivision can lead to wasted effort</li>
<li>How visual structure begins to emerge even from simple logic</li>
</ul>
<hr />
<h2><a href="#whats-missing" aria-hidden="true" class="anchor" id="whats-missing"></a>What’s Missing</h2>
<p>This method uses <strong>no prioritization</strong>.</p>
<p>We pick the next quad from the array in order, regardless of whether it has high or low color variation. This means:</p>
<ul>
<li>We waste effort subdividing flat or unimportant regions</li>
<li>High detail areas may not be refined early</li>
<li>Rendering is “slower” (results appear not as fast) and less efficient</li>
</ul>
<p>Still it creates a pleasing and abstract reveal of the image.</p>
<hr />
<h2><a href="#project-code" aria-hidden="true" class="anchor" id="project-code"></a>Project Code</h2>
<p>You will find the complete source code here: <a href="https://github.com/letsreinventthewheel/quadtree-art">quadtree-art</a></p>
<p>After building and running the project you will see your image rendered as large color block.
Press any key to progressively split the image into smaller quads. Each quad is rendered with
its average color. There is no prioritization yet, so the image is refined in order revealing
detail bit by bit across the entire canvas.</p>
<hr />
<h2><a href="#external-resources" aria-hidden="true" class="anchor" id="external-resources"></a>External Resources</h2>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Quadtree">Quadtree</a></li>
<li><a href="https://en.wikipedia.org/wiki/Weighted_arithmetic_mean">Weighted arithmetic mean</a></li>
<li><a href="https://en.wikipedia.org/wiki/Bessel%27s_correction">Bessel’s correction</a></li>
<li><a href="https://wiki.libsdl.org/SDL3/BestKeyboardPractices">Best keyboard practices in SDL3</a></li>
</ul>
<h2><a href="#acknowledgements" aria-hidden="true" class="anchor" id="acknowledgements"></a>Acknowledgements</h2>
<ul>
<li><a href="https://github.com/fogleman/Quads">Quads by Michael Fogleman</a> - original idea</li>
</ul>
<hr />
<h2><a href="#next-up" aria-hidden="true" class="anchor" id="next-up"></a>Next Up</h2>
<p>In the final part we introduce a <strong>min-heap</strong> priority queue to guide the subdivision process by error and area. The result is much more coherent and satisfying.</p>
]]></content:encoded></item><item><title>Quadtree Art, Part 1: Setting Up the Canvas</title><link>https://letsreinventthewheel.github.io/blog/quadtree-art-part1-sdl</link><description><![CDATA[<p>Setting up rendering pipeline using SDL3 and stb_image. We load an image, create
a framebuffer and display the result using a texture. This part lays the groundwork
for interactive image subdivision in future parts.</p>
]]></description><author>Kontantin Saveljev</author><guid>https://letsreinventthewheel.github.io/blog/quadtree-art-part1-sdl</guid><pubDate>Mon, 07 Jul 2025 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>In this first part we lay the groundwork for the quadtree art project.</p>
<p>We focus on setting up a basic SDL environment, a framebuffer and loading an image using <code>stb_image.h</code>. There is no subdivision logic yet. We are simply preparing to draw.</p>
<hr />
<h2><a href="#what-youll-learn" aria-hidden="true" class="anchor" id="what-youll-learn"></a>What You’ll Learn</h2>
<ul>
<li>How to set up a window, renderer, and texture using SDL3</li>
<li>How to load an image using <code>stb_image.h</code></li>
<li>How to allocate and update a manual framebuffer</li>
<li>The foundation for building an interactive image renderer in C23</li>
</ul>
<hr />
<h2><a href="#why-it-matters" aria-hidden="true" class="anchor" id="why-it-matters"></a>Why It Matters</h2>
<p>Every graphics project needs a solid foundation.</p>
<p>This part ensures we can:</p>
<ul>
<li>Read an image from disk</li>
<li>Display a dynamic texture</li>
<li>Prepare for manual pixel drawing using a framebuffer</li>
</ul>
<hr />
<h2><a href="#project-code" aria-hidden="true" class="anchor" id="project-code"></a>Project Code</h2>
<p>You will find the complete source code here: <a href="https://github.com/letsreinventthewheel/quadtree-art">quadtree-art</a></p>
<p>If everything is set up correctly you should see the input image drawn using the framebuffer.</p>
<hr />
<h2><a href="#external-resources" aria-hidden="true" class="anchor" id="external-resources"></a>External Resources</h2>
<ul>
<li><a href="https://libsdl.org/">SDL3</a></li>
<li><a href="https://wiki.libsdl.org/SDL3/Tutorials/FrontPage">SDL tutorials</a></li>
</ul>
<hr />
<h2><a href="#acknowledgements" aria-hidden="true" class="anchor" id="acknowledgements"></a>Acknowledgements</h2>
<ul>
<li><a href="https://github.com/fogleman/Quads">Quads by Michael Fogleman</a> - original idea</li>
</ul>
<hr />
<h2><a href="#next-up" aria-hidden="true" class="anchor" id="next-up"></a>Next Up</h2>
<p>In part 2 we will build the actual quadtree by subdividing the image region by region.</p>
]]></content:encoded></item><item><title>0n0FF: Teaching a Puzzle to Solve Itself</title><link>https://letsreinventthewheel.github.io/blog/onoff-solver</link><description><![CDATA[<p>We extend 0n0FF with a real time solver powered by Breadth First Search (BFS) and
bit manipulation. Learn how to compute perfect puzzle solutions and guide players
with subtle visual hints - all in <code>React</code> and <code>TypeScript</code>.</p>
]]></description><author>Kontantin Saveljev</author><guid>https://letsreinventthewheel.github.io/blog/onoff-solver</guid><pubDate>Fri, 27 Jun 2025 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>In <a href="https://letsreinventthewheel.github.io/blog/onoff/">previous</a> episode we built <strong>0n0FF</strong>, a minimalist tile flipping puzzle game in <code>React</code> and <code>TypeScript</code>. This time we’re giving our game a brain.</p>
<p>We are adding a <strong>solver</strong> that can compute the optimal solution to any board state and then <strong>show the next best move</strong> directly to the player using a subtle, gray toned guide beneath the main board.</p>
<h2><a href="#what-youll-learn" aria-hidden="true" class="anchor" id="what-youll-learn"></a>What You’ll Learn</h2>
<ul>
<li>How to <strong>solve a logic puzzle with breadth first search (BFS)</strong></li>
<li>How to <strong>represent board states as bitmasks</strong> for performance</li>
<li>How to <strong>integrate a solver into an interactive React UI</strong></li>
<li>How to <strong>visualize solver hints</strong> without distracting from gameplay</li>
<li>Why immutability and clean state separation matter</li>
</ul>
<h2><a href="#project-code" aria-hidden="true" class="anchor" id="project-code"></a>Project Code</h2>
<p>You’ll find the complete source code here: <a href="https://github.com/letsreinventthewheel/0n0ff-puzzle">0n0ff-puzzle</a></p>
<h3><a href="#how-it-works" aria-hidden="true" class="anchor" id="how-it-works"></a>How It Works</h3>
<p>The core idea is simple: treat each board state as a node in a graph. A move transforms one state into another and we search for the <strong>shortest path</strong> to the win condition (all green tiles).</p>
<p>To avoid visiting the same state twice we encode the board as a single integer (a <strong>bitmask</strong> of 16 bits for a 4x4 grid). This turns a potentially slow puzzle solver into a <strong>blazing fast</strong> pathfinder.</p>
<pre class="language-ts"><span class="source ts"><span class="meta var expr ts"><span class="storage type ts">const</span> <span class="meta var-single-variable expr ts"><span class="meta definition variable ts"><span class="variable other constant ts"><span class="entity name function ts">hash</span></span></span> </span><span class="keyword operator assignment ts">=</span><span class="meta arrow ts"> <span class="meta parameters ts"><span class="punctuation definition parameters begin ts">(</span><span class="variable parameter ts">grid</span><span class="meta type annotation ts"><span class="keyword operator type annotation ts">:</span> <span class="entity name type ts">Grid</span></span><span class="punctuation definition parameters end ts">)</span></span><span class="meta return type arrow ts"><span class="keyword operator type annotation ts">:</span> <span class="support type primitive ts">number</span> </span></span><span class="meta arrow ts"><span class="storage type function arrow ts">=&gt;</span> <span class="meta block ts"><span class="punctuation definition block ts">{</span>
  <span class="meta var expr ts"><span class="storage type ts">let</span> <span class="meta var-single-variable expr ts"><span class="meta definition variable ts"><span class="variable other readwrite ts">result</span></span> </span><span class="keyword operator assignment ts">=</span> <span class="constant numeric decimal ts">0</span></span><span class="punctuation terminator statement ts">;</span>
  <span class="keyword control loop ts">for</span> <span class="meta brace round ts">(</span><span class="meta var expr ts"><span class="storage type ts">let</span> <span class="meta var-single-variable expr ts"><span class="meta definition variable ts"><span class="variable other readwrite ts">r</span></span> </span><span class="keyword operator assignment ts">=</span> <span class="constant numeric decimal ts">0</span></span><span class="punctuation terminator statement ts">;</span> <span class="variable other readwrite ts">r</span> <span class="keyword operator relational ts">&lt;</span> <span class="variable other constant ts">GRID_SIZE</span><span class="punctuation terminator statement ts">;</span> <span class="variable other readwrite ts">r</span><span class="keyword operator increment ts">++</span><span class="meta brace round ts">)</span> <span class="meta block ts"><span class="punctuation definition block ts">{</span>
    <span class="keyword control loop ts">for</span> <span class="meta brace round ts">(</span><span class="meta var expr ts"><span class="storage type ts">let</span> <span class="meta var-single-variable expr ts"><span class="meta definition variable ts"><span class="variable other readwrite ts">c</span></span> </span><span class="keyword operator assignment ts">=</span> <span class="constant numeric decimal ts">0</span></span><span class="punctuation terminator statement ts">;</span> <span class="variable other readwrite ts">c</span> <span class="keyword operator relational ts">&lt;</span> <span class="variable other constant ts">GRID_SIZE</span><span class="punctuation terminator statement ts">;</span> <span class="variable other readwrite ts">c</span><span class="keyword operator increment ts">++</span><span class="meta brace round ts">)</span> <span class="meta block ts"><span class="punctuation definition block ts">{</span>
      <span class="keyword control conditional ts">if</span> <span class="meta brace round ts">(</span><span class="variable other readwrite ts">grid</span><span class="meta array literal ts"><span class="meta brace square ts">[</span><span class="variable other readwrite ts">r</span><span class="meta brace square ts">]</span></span><span class="meta array literal ts"><span class="meta brace square ts">[</span><span class="variable other readwrite ts">c</span><span class="meta brace square ts">]</span></span><span class="meta brace round ts">)</span> <span class="meta block ts"><span class="punctuation definition block ts">{</span>
        <span class="variable other readwrite ts">result</span> <span class="keyword operator assignment compound bitwise ts">|=</span> <span class="constant numeric decimal ts">1</span> <span class="keyword operator bitwise shift ts">&lt;&lt;</span> <span class="meta brace round ts">(</span><span class="variable other readwrite ts">r</span> <span class="keyword operator arithmetic ts">*</span> <span class="variable other constant ts">GRID_SIZE</span> <span class="keyword operator arithmetic ts">+</span> <span class="variable other readwrite ts">c</span><span class="meta brace round ts">)</span><span class="punctuation terminator statement ts">;</span>
      <span class="punctuation definition block ts">}</span></span>
    <span class="punctuation definition block ts">}</span></span>
  <span class="punctuation definition block ts">}</span></span>
  <span class="keyword control flow ts">return</span> <span class="variable other readwrite ts">result</span><span class="punctuation terminator statement ts">;</span>
<span class="punctuation definition block ts">}</span></span></span></span><span class="punctuation terminator statement ts">;</span>
</span></code></pre>
<hr />
<h4><a href="#breadth-first-search-bfs" aria-hidden="true" class="anchor" id="breadth-first-search-bfs"></a>Breadth First Search (BFS)</h4>
<p>Using a BFS loop we explore all possible move sequences from the current board state, stopping the moment we find a winning path.</p>
<pre class="language-ts"><span class="source ts"><span class="keyword control loop ts">while</span> <span class="meta brace round ts">(</span><span class="variable other object ts">queue</span><span class="punctuation accessor ts">.</span><span class="support variable property ts">length</span><span class="meta brace round ts">)</span> <span class="meta block ts"><span class="punctuation definition block ts">{</span>
  <span class="meta var expr ts"><span class="storage type ts">const</span> <span class="meta object-binding-pattern-variable ts"><span class="punctuation definition binding-pattern object ts">{</span> <span class="meta definition variable ts"><span class="variable other constant ts">grid</span></span><span class="punctuation separator comma ts">,</span> <span class="meta definition variable ts"><span class="variable other constant ts">moves</span></span> <span class="punctuation definition binding-pattern object ts">}</span> </span><span class="keyword operator assignment ts">=</span> <span class="meta function-call ts"><span class="variable other object ts">queue</span><span class="punctuation accessor ts">.</span><span class="support function ts">shift</span></span><span class="meta brace round ts">(</span><span class="meta brace round ts">)</span></span><span class="punctuation terminator statement ts">;</span>
  <span class="keyword control conditional ts">if</span> <span class="meta brace round ts">(</span><span class="meta function-call ts"><span class="entity name function ts">isWon</span></span><span class="meta brace round ts">(</span><span class="variable other readwrite ts">grid</span><span class="meta brace round ts">)</span><span class="meta brace round ts">)</span> <span class="keyword control flow ts">return</span> <span class="variable other readwrite ts">moves</span><span class="punctuation terminator statement ts">;</span>
<span class="punctuation whitespace comment leading ts">  </span><span class="comment line double-slash ts"><span class="punctuation definition comment ts">//</span></span><span class="comment line double-slash ts"> Try all 16 next moves</span>
<span class="punctuation definition block ts">}</span></span>
</span></code></pre>
<p>Each move toggles an entire row and column which we simulate using XOR on the bitmask.</p>
<h4><a href="#solver-integration" aria-hidden="true" class="anchor" id="solver-integration"></a>Solver Integration</h4>
<p>Once the solver is in place, we run it:</p>
<ul>
<li>At the <strong>start of each new game</strong></li>
<li>After <strong>every player move</strong></li>
</ul>
<p>This allows us to continuously maintain an <strong>up to date optimal path</strong> to the win state. The next move is then shown to the player (but only subtly).</p>
<h4><a href="#visualizing-the-hint" aria-hidden="true" class="anchor" id="visualizing-the-hint"></a>Visualizing the Hint</h4>
<p>Beneath the main board we render a <strong>semi transparent, grayscale copy</strong> of the grid with a <strong>darker highlight</strong> on the next suggested move:</p>
<pre class="language-tsx"><span class="source tsx"><span class="meta tag tsx"><span class="punctuation definition tag begin tsx">&lt;</span><span class="entity name tag tsx">div</span><span class="meta tag attributes tsx">
  <span class="entity other attribute-name tsx">className</span><span class="keyword operator assignment tsx">=</span><span class="punctuation section embedded begin tsx">{</span><span class="meta embedded expression tsx"><span class="string template tsx"><span class="punctuation definition string template begin tsx">`</span>solution-cell <span class="meta template expression tsx"><span class="punctuation definition template-expression begin tsx">${</span></span><span class="meta template expression tsx"><span class="meta embedded line tsx">
    <span class="variable other object tsx">nextMove</span><span class="punctuation accessor tsx">.</span><span class="variable other property tsx">row</span> <span class="keyword operator comparison tsx">===</span> <span class="variable other readwrite tsx">rowIdx</span> <span class="keyword operator logical tsx">&amp;&amp;</span> <span class="variable other object tsx">nextMove</span><span class="punctuation accessor tsx">.</span><span class="variable other property tsx">column</span> <span class="keyword operator comparison tsx">===</span> <span class="variable other readwrite tsx">cellIdx</span> <span class="keyword operator ternary tsx">?</span> <span class="string quoted double tsx"><span class="punctuation definition string begin tsx">&quot;</span>next-move<span class="punctuation definition string end tsx">&quot;</span></span> <span class="keyword operator ternary tsx">:</span> <span class="string quoted double tsx"><span class="punctuation definition string begin tsx">&quot;</span><span class="punctuation definition string end tsx">&quot;</span></span>
  </span><span class="punctuation definition template-expression end tsx">}</span></span><span class="punctuation definition string template end tsx">`</span></span></span><span class="punctuation section embedded end tsx">}</span>
</span><span class="punctuation definition tag end tsx">/&gt;</span></span>
</span></code></pre>
<p>And in CSS:</p>
<pre class="language-css"><span class="source css"><span class="meta selector css"><span class="entity other attribute-name class css"><span class="punctuation definition entity css">.</span>solution-cell</span><span class="entity other attribute-name class css"><span class="punctuation definition entity css">.</span>next-move</span> </span><span class="meta property-list css"><span class="punctuation section property-list css">{</span>
  <span class="meta property-name css"><span class="support type property-name css">background</span></span><span class="punctuation separator key-value css">:</span><span class="meta property-value css"> </span><span class="meta property-value css"><span class="meta function-call css"><span class="support function color css">rgba</span><span class="meta group css"><span class="punctuation definition group begin css">(</span><span class="constant numeric integer decimal css">20</span><span class="punctuation separator sequence css">,</span> <span class="constant numeric integer decimal css">20</span><span class="punctuation separator sequence css">,</span> <span class="constant numeric integer decimal css">20</span><span class="punctuation separator sequence css">,</span> <span class="constant numeric float decimal css">0<span class="punctuation separator decimal css">.</span>6</span></span><span class="meta group css"><span class="punctuation definition group end css">)</span></span></span></span><span class="punctuation terminator rule css">;</span>
  <span class="meta property-name css"><span class="support type property-name css">border</span></span><span class="punctuation separator key-value css">:</span><span class="meta property-value css"> </span><span class="meta property-value css"><span class="constant numeric integer decimal css">1<span class="keyword other unit css">px</span></span> <span class="support constant property-value css">solid</span> <span class="meta function-call css"><span class="support function color css">rgba</span><span class="meta group css"><span class="punctuation definition group begin css">(</span><span class="constant numeric integer decimal css">30</span><span class="punctuation separator sequence css">,</span> <span class="constant numeric integer decimal css">30</span><span class="punctuation separator sequence css">,</span> <span class="constant numeric integer decimal css">30</span><span class="punctuation separator sequence css">,</span> <span class="constant numeric float decimal css">0<span class="punctuation separator decimal css">.</span>8</span></span><span class="meta group css"><span class="punctuation definition group end css">)</span></span></span></span><span class="punctuation terminator rule css">;</span>
  <span class="meta property-name css"><span class="support type property-name css">box-shadow</span></span><span class="punctuation separator key-value css">:</span><span class="meta property-value css"> </span><span class="meta property-value css"><span class="constant numeric integer decimal css">0</span> <span class="constant numeric integer decimal css">0</span> <span class="constant numeric integer decimal css">4<span class="keyword other unit css">px</span></span> <span class="meta function-call css"><span class="support function color css">rgba</span><span class="meta group css"><span class="punctuation definition group begin css">(</span><span class="constant numeric integer decimal css">100</span><span class="punctuation separator sequence css">,</span> <span class="constant numeric integer decimal css">100</span><span class="punctuation separator sequence css">,</span> <span class="constant numeric integer decimal css">100</span><span class="punctuation separator sequence css">,</span> <span class="constant numeric float decimal css">0<span class="punctuation separator decimal css">.</span>8</span></span><span class="meta group css"><span class="punctuation definition group end css">)</span></span></span></span><span class="punctuation terminator rule css">;</span>
  <span class="meta property-name css"><span class="support type property-name css">filter</span></span><span class="punctuation separator key-value css">:</span><span class="meta property-value css"> </span><span class="meta property-value css"><span class="meta function-call css"><span class="support function filter css">blur</span><span class="meta group css"><span class="punctuation definition group begin css">(</span><span class="constant numeric float decimal css">0<span class="punctuation separator decimal css">.</span>8<span class="keyword other unit css">px</span></span></span><span class="meta group css"><span class="punctuation definition group end css">)</span></span></span></span><span class="punctuation terminator rule css">;</span>
</span><span class="punctuation section property-list css">}</span>
</span></code></pre>
<hr />
<h4><a href="#pure-state-clean-react" aria-hidden="true" class="anchor" id="pure-state-clean-react"></a>Pure State, Clean React</h4>
<p>To keep things clean and reactive:</p>
<ul>
<li>We <strong>track both the initial and current board state</strong></li>
<li>The solver output is stored in <code>state.solver</code></li>
<li>We added a <strong>“Reset Game”</strong> button to return to the initial configuration</li>
</ul>
<p>This ensures the solver always computes from the true current board and allows for easy restarts or comparisons.</p>
<h4><a href="#performance" aria-hidden="true" class="anchor" id="performance"></a>Performance</h4>
<p>Thanks to bit manipulation and BFS:</p>
<ul>
<li>Solving from any state is <strong>instant</strong></li>
<li>We support <strong>perfect solutions</strong> on every move</li>
<li>No async, no lag, no external dependencies</li>
</ul>
<h4><a href="#final-touches" aria-hidden="true" class="anchor" id="final-touches"></a>Final Touches</h4>
<p>We updated the <strong>header</strong> to show:</p>
<ul>
<li>The number of remaining moves in the current optimal path</li>
<li>The original minimum solution length (for comparison)</li>
</ul>
<p>This adds a layer of motivation for players trying to solve it on their own.</p>
<h2><a href="#future-ideas" aria-hidden="true" class="anchor" id="future-ideas"></a>Future Ideas</h2>
<ul>
<li>Animate the full solution path step by step</li>
<li>Let players <strong>request a hint</strong> only when needed</li>
<li>Track player vs solver efficiency</li>
<li>Add different grid sizes or random move obfuscation</li>
</ul>
<h2><a href="#external-resources" aria-hidden="true" class="anchor" id="external-resources"></a>External Resources</h2>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Breadth-first_search">Breadth-first search</a></li>
<li><a href="https://www.geeksforgeeks.org/breadth-first-search-or-bfs-for-a-graph/">Breadth First Search of BFS for a Graph</a></li>
<li><a href="https://en.wikipedia.org/wiki/Bitwise_operation">Bitwise operation</a></li>
<li><a href="https://sassafras13.github.io/BitManipulation/">Bit Manipulation</a></li>
</ul>
]]></content:encoded></item><item><title>0n0FF: A Flipping Puzzle in React</title><link>https://letsreinventthewheel.github.io/blog/onoff</link><description><![CDATA[<p>A compact logic puzzle where every click flips an entire row and column.
Using <code>TypeScript</code>, <code>React</code>, <code>Context</code>, and <code>Reducers</code>, we implement the game
from scratch with a clean, minimal UI and satisfying interactions</p>
]]></description><author>Kontantin Saveljev</author><guid>https://letsreinventthewheel.github.io/blog/onoff</guid><pubDate>Thu, 26 Jun 2025 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>Welcome back to <em>Let’s Reinvent the Wheel</em>.</p>
<p>In this project we build a minimalist logic puzzle called <code>0n0FF</code> using <code>React</code> and <code>TypeScript</code>.
A 4x4 grid game where each move flips a row and column, and the goal is to turn all tiles
green with as few moves as possible.</p>
<h2><a href="#what-youll-learn" aria-hidden="true" class="anchor" id="what-youll-learn"></a>What You’ll Learn</h2>
<p>By the end of this project you’ll understand how to:</p>
<ul>
<li><strong>Model puzzle logic</strong> using a reducer based state machine in React.</li>
<li><strong>Design a grid based toggle mechanic</strong> that affects rows and columns.</li>
<li><strong>Leverage React Context</strong> for clean and reusable global state.</li>
<li><strong>Style interactive components</strong> with CSS for feedback and animations.</li>
</ul>
<p>Whether you’re learning React, exploring puzzle mechanics, or just love brain teasers, this mini project packs a lot of value in a small footprint.</p>
<h2><a href="#project-code" aria-hidden="true" class="anchor" id="project-code"></a>Project Code</h2>
<p>You’ll find the complete source code here: <a href="https://github.com/letsreinventthewheel/0n0ff-puzzle">0n0ff-puzzle</a></p>
<h3><a href="#how-it-works" aria-hidden="true" class="anchor" id="how-it-works"></a>How It Works</h3>
<p>This project is written in <strong>React + TypeScript</strong>, styled with simple <strong>CSS Modules</strong>, and designed to be a compact and fun codebase to explore UI state management and puzzle logic.</p>
<p>We manage game state with a reducer (<code>useReducer</code>) and isolate logic in a <code>GameContext</code> to keep components clean and focused.</p>
<h4><a href="#game-mechanics" aria-hidden="true" class="anchor" id="game-mechanics"></a>Game Mechanics</h4>
<ul>
<li>A 4x4 grid of cells.</li>
<li>Each cell is either <strong>green (on)</strong> or <strong>red (off)</strong>.</li>
<li>Clicking a cell toggles the entire <strong>row</strong> and the entire <strong>column</strong></li>
<li>Goal: Make <strong>every cell green</strong>.</li>
</ul>
<h4><a href="#game-logic-breakdown" aria-hidden="true" class="anchor" id="game-logic-breakdown"></a>Game Logic Breakdown</h4>
<pre class="language-ts"><span class="source ts"><span class="meta var expr ts"><span class="storage type ts">const</span> <span class="meta var-single-variable expr ts"><span class="meta definition variable ts"><span class="variable other constant ts"><span class="entity name function ts">toggleCell</span></span></span> </span><span class="keyword operator assignment ts">=</span><span class="meta arrow ts"> <span class="meta parameters ts"><span class="punctuation definition parameters begin ts">(</span><span class="variable parameter ts">grid</span><span class="punctuation separator parameter ts">,</span> <span class="variable parameter ts">row</span><span class="punctuation separator parameter ts">,</span> <span class="variable parameter ts">column</span><span class="punctuation definition parameters end ts">)</span></span> </span><span class="meta arrow ts"><span class="storage type function arrow ts">=&gt;</span> <span class="meta block ts"><span class="punctuation definition block ts">{</span>
  <span class="meta var expr ts"><span class="storage type ts">const</span> <span class="meta var-single-variable expr ts"><span class="meta definition variable ts"><span class="variable other constant ts">newGrid</span></span> </span><span class="keyword operator assignment ts">=</span> <span class="meta function-call ts"><span class="entity name function ts">structuredClone</span></span><span class="meta brace round ts">(</span><span class="variable other readwrite ts">grid</span><span class="meta brace round ts">)</span></span><span class="punctuation terminator statement ts">;</span>
  <span class="keyword control loop ts">for</span> <span class="meta brace round ts">(</span><span class="meta var expr ts"><span class="storage type ts">let</span> <span class="meta var-single-variable expr ts"><span class="meta definition variable ts"><span class="variable other readwrite ts">r</span></span> </span><span class="keyword operator assignment ts">=</span> <span class="constant numeric decimal ts">0</span></span><span class="punctuation terminator statement ts">;</span> <span class="variable other readwrite ts">r</span> <span class="keyword operator relational ts">&lt;</span> <span class="constant numeric decimal ts">4</span><span class="punctuation terminator statement ts">;</span> <span class="variable other readwrite ts">r</span><span class="keyword operator increment ts">++</span><span class="meta brace round ts">)</span> <span class="meta block ts"><span class="punctuation definition block ts">{</span>
    <span class="keyword control loop ts">for</span> <span class="meta brace round ts">(</span><span class="meta var expr ts"><span class="storage type ts">let</span> <span class="meta var-single-variable expr ts"><span class="meta definition variable ts"><span class="variable other readwrite ts">c</span></span> </span><span class="keyword operator assignment ts">=</span> <span class="constant numeric decimal ts">0</span></span><span class="punctuation terminator statement ts">;</span> <span class="variable other readwrite ts">c</span> <span class="keyword operator relational ts">&lt;</span> <span class="constant numeric decimal ts">4</span><span class="punctuation terminator statement ts">;</span> <span class="variable other readwrite ts">c</span><span class="keyword operator increment ts">++</span><span class="meta brace round ts">)</span> <span class="meta block ts"><span class="punctuation definition block ts">{</span>
      <span class="keyword control conditional ts">if</span> <span class="meta brace round ts">(</span><span class="variable other readwrite ts">r</span> <span class="keyword operator comparison ts">===</span> <span class="variable other readwrite ts">row</span> <span class="keyword operator logical ts">||</span> <span class="variable other readwrite ts">c</span> <span class="keyword operator comparison ts">===</span> <span class="variable other readwrite ts">column</span><span class="meta brace round ts">)</span> <span class="meta block ts"><span class="punctuation definition block ts">{</span>
        <span class="variable other readwrite ts">newGrid</span><span class="meta array literal ts"><span class="meta brace square ts">[</span><span class="variable other readwrite ts">r</span><span class="meta brace square ts">]</span></span><span class="meta array literal ts"><span class="meta brace square ts">[</span><span class="variable other readwrite ts">c</span><span class="meta brace square ts">]</span></span> <span class="keyword operator assignment ts">=</span> <span class="keyword operator logical ts">!</span><span class="variable other readwrite ts">newGrid</span><span class="meta array literal ts"><span class="meta brace square ts">[</span><span class="variable other readwrite ts">r</span><span class="meta brace square ts">]</span></span><span class="meta array literal ts"><span class="meta brace square ts">[</span><span class="variable other readwrite ts">c</span><span class="meta brace square ts">]</span></span><span class="punctuation terminator statement ts">;</span>
      <span class="punctuation definition block ts">}</span></span>
    <span class="punctuation definition block ts">}</span></span>
  <span class="punctuation definition block ts">}</span></span>
  <span class="keyword control flow ts">return</span> <span class="variable other readwrite ts">newGrid</span><span class="punctuation terminator statement ts">;</span>
<span class="punctuation definition block ts">}</span></span></span></span><span class="punctuation terminator statement ts">;</span>
</span></code></pre>
<p>Each click affects the full row and column: a mechanic that quickly scrambles your carefully laid plans 😅</p>
<h4><a href="#why-this-puzzle" aria-hidden="true" class="anchor" id="why-this-puzzle"></a>Why This Puzzle?</h4>
<p>The challenge is subtle:</p>
<ul>
<li>It <em>looks</em> easy.</li>
<li>But the interactions are non trivial.</li>
<li>Requires <strong>planning, prediction, and experimentation</strong>.</li>
</ul>
<p>It’s also a <strong>great starter puzzle</strong> if you want to learn state management in React beyond <code>useState</code>.</p>
<h2><a href="#future-improvements" aria-hidden="true" class="anchor" id="future-improvements"></a>Future Improvements</h2>
<ul>
<li>Add solver to calculate optimal moves count</li>
<li>Track win history</li>
<li>Support larger grid sizes (e.g. 5x5).</li>
<li>Add sound or haptic feedback.</li>
</ul>
<h2><a href="#external-resources" aria-hidden="true" class="anchor" id="external-resources"></a>External Resources</h2>
<ul>
<li><a href="https://react.dev/learn/scaling-up-with-reducer-and-context">React: Scaling Up with Reducer and Context</a></li>
<li><a href="https://2048game.com/">2048 game</a> - UI inspiration</li>
</ul>
]]></content:encoded></item><item><title>Solving Boggle Backwards</title><link>https://letsreinventthewheel.github.io/blog/solving-boggle-backwards</link><description><![CDATA[<p>A simple Boggle solver that flips the problem on its head: instead of finding words
on the board, we check if dictionary words can be formed from the board. Surprisingly
simple, surprisingly effective.</p>
]]></description><author>Kontantin Saveljev</author><guid>https://letsreinventthewheel.github.io/blog/solving-boggle-backwards</guid><pubDate>Sat, 21 Jun 2025 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>This blog accompanies the video tutorial on building a Boggle solver that works in reverse…
and does it surprisingly well (for smaller board sizes; it won’t be as effective for a 100x100 board).
Instead of finding words <em>on</em> the board, it checks if each word <em>can</em> be formed from the board.</p>
<h2><a href="#what-youll-learn" aria-hidden="true" class="anchor" id="what-youll-learn"></a>What You’ll Learn</h2>
<ul>
<li>How to reverse the typical Boggle solving approach.</li>
<li>How to search for a word on a 2D board using recursion.</li>
<li>How brute force can be “good enough” with the right constraints.</li>
</ul>
<h2><a href="#project-code" aria-hidden="true" class="anchor" id="project-code"></a>Project Code</h2>
<p>You’ll find the complete source code here: <a href="https://github.com/letsreinventthewheel/simple-boggle-solver">simple-boggle-solver</a></p>
<h2><a href="#how-it-works" aria-hidden="true" class="anchor" id="how-it-works"></a>How It Works</h2>
<h3><a href="#the-idea" aria-hidden="true" class="anchor" id="the-idea"></a>The Idea</h3>
<p>Most Boggle solvers start with the board and try to construct words by exploring every path. We’re doing the opposite: for each word in the dictionary, we check if it can be found on the board.</p>
<h4><a href="#step-1-read-the-board" aria-hidden="true" class="anchor" id="step-1-read-the-board"></a>Step 1: Read the Board</h4>
<p>We represent the board as a <code>Dict[Position, str]</code>. We pass it to our solver as a single string of length <code>board_size * board_size</code></p>
<pre class="language-python"><span class="source python"><span class="meta function python"><span class="storage type function python"><span class="keyword declaration function python">def</span></span> <span class="entity name function python"><span class="meta generic-name python">build_board</span></span></span><span class="meta function parameters python"><span class="punctuation section parameters begin python">(</span></span><span class="meta function parameters python"><span class="variable parameter python">board_str</span></span><span class="meta function parameters annotation python"><span class="punctuation separator annotation parameter python">:</span> <span class="meta qualified-name python"><span class="support type python">str</span></span></span><span class="meta function parameters python"><span class="punctuation section parameters end python">)</span></span><span class="meta function python"> </span><span class="meta function annotation return python"><span class="punctuation separator annotation return python">-&gt;</span> <span class="meta qualified-name python"><span class="meta generic-name python">Board</span></span></span><span class="meta function python"><span class="punctuation section function begin python">:</span></span>
    <span class="keyword control flow return python">return</span> <span class="meta mapping-or-set python"><span class="punctuation section mapping-or-set begin python">{</span>
        <span class="meta sequence tuple python"><span class="punctuation section sequence begin python">(</span><span class="meta qualified-name python"><span class="meta generic-name python">i</span></span> <span class="keyword operator arithmetic python">/</span><span class="keyword operator arithmetic python">/</span> <span class="meta qualified-name python"><span class="variable other constant python">BOARD_SIZE</span></span><span class="punctuation separator sequence python">,</span> <span class="meta qualified-name python"><span class="meta generic-name python">i</span></span> <span class="keyword operator arithmetic python">%</span> <span class="meta qualified-name python"><span class="variable other constant python">BOARD_SIZE</span></span><span class="punctuation section sequence end python">)</span></span><span class="punctuation separator mapping key-value python">:</span></span><span class="meta mapping python">
        </span><span class="meta mapping value python"><span class="meta item-access python"><span class="meta qualified-name python"><span class="meta generic-name python">board_str</span></span></span><span class="meta item-access python"><span class="punctuation section brackets begin python">[</span></span><span class="meta item-access arguments python"><span class="meta qualified-name python"><span class="meta generic-name python">i</span></span></span><span class="meta item-access python"><span class="punctuation section brackets end python">]</span></span></span><span class="meta mapping python"> <span class="meta expression generator python"><span class="keyword control loop for generator python">for</span> <span class="meta generic-name python">i</span> <span class="keyword control loop for in python">in</span></span> <span class="meta function-call python"><span class="meta qualified-name python"><span class="variable function python"><span class="support function builtin python">range</span></span></span></span><span class="meta function-call arguments python"><span class="punctuation section arguments begin python">(</span><span class="meta qualified-name python"><span class="variable other constant python">BOARD_SIZE</span></span> <span class="keyword operator arithmetic python">*</span> <span class="meta qualified-name python"><span class="variable other constant python">BOARD_SIZE</span></span><span class="punctuation section arguments end python">)</span></span>
    <span class="punctuation section mapping end python">}</span></span>
</span></code></pre>
<hr />
<h4><a href="#step-2-load-the-dictionary" aria-hidden="true" class="anchor" id="step-2-load-the-dictionary"></a>Step 2: Load the Dictionary</h4>
<p>We use <code>/usr/share/dict/words</code> and filter out anything too short or capitalized or hyphenated</p>
<pre class="language-python"><span class="source python"><span class="meta qualified-name python"><span class="meta generic-name python">dictionary</span></span> <span class="keyword operator assignment python">=</span> <span class="meta sequence list python"><span class="punctuation section sequence begin python">[</span>
    <span class="meta function-call python"><span class="meta qualified-name python"><span class="meta generic-name python">w</span></span><span class="meta qualified-name python"><span class="punctuation accessor dot python">.</span></span><span class="meta qualified-name python"><span class="variable function python"><span class="meta generic-name python">strip</span></span></span></span><span class="meta function-call arguments python"><span class="punctuation section arguments begin python">(</span><span class="punctuation section arguments end python">)</span></span><span class="meta function-call python"><span class="meta qualified-name python"><span class="punctuation accessor dot python">.</span></span><span class="meta qualified-name python"><span class="variable function python"><span class="meta generic-name python">lower</span></span></span></span><span class="meta function-call arguments python"><span class="punctuation section arguments begin python">(</span><span class="punctuation section arguments end python">)</span></span>
    <span class="meta expression generator python"><span class="keyword control loop for generator python">for</span> <span class="meta generic-name python">w</span> <span class="keyword control loop for in python">in</span></span> <span class="meta qualified-name python"><span class="meta generic-name python">f</span></span>
    <span class="keyword control conditional if python">if</span> <span class="meta function-call python"><span class="meta qualified-name python"><span class="variable function python"><span class="support function builtin python">len</span></span></span></span><span class="meta function-call arguments python"><span class="punctuation section arguments begin python">(</span><span class="meta function-call python"><span class="meta qualified-name python"><span class="meta generic-name python">w</span></span><span class="meta qualified-name python"><span class="punctuation accessor dot python">.</span></span><span class="meta qualified-name python"><span class="variable function python"><span class="meta generic-name python">strip</span></span></span></span><span class="meta function-call arguments python"><span class="punctuation section arguments begin python">(</span><span class="punctuation section arguments end python">)</span></span><span class="punctuation section arguments end python">)</span></span> <span class="keyword operator comparison python">&gt;</span> <span class="constant numeric integer decimal python">2</span> <span class="keyword operator logical python">and</span> <span class="meta function-call python"><span class="meta qualified-name python"><span class="meta generic-name python">w</span></span><span class="meta qualified-name python"><span class="punctuation accessor dot python">.</span></span><span class="meta qualified-name python"><span class="variable function python"><span class="meta generic-name python">strip</span></span></span></span><span class="meta function-call arguments python"><span class="punctuation section arguments begin python">(</span><span class="punctuation section arguments end python">)</span></span><span class="meta function-call python"><span class="meta qualified-name python"><span class="punctuation accessor dot python">.</span></span><span class="meta qualified-name python"><span class="variable function python"><span class="meta generic-name python">isalpha</span></span></span></span><span class="meta function-call arguments python"><span class="punctuation section arguments begin python">(</span><span class="punctuation section arguments end python">)</span></span> <span class="keyword operator logical python">and</span> <span class="meta function-call python"><span class="meta qualified-name python"><span class="meta generic-name python">w</span></span><span class="meta qualified-name python"><span class="punctuation accessor dot python">.</span></span><span class="meta qualified-name python"><span class="variable function python"><span class="meta generic-name python">strip</span></span></span></span><span class="meta function-call arguments python"><span class="punctuation section arguments begin python">(</span><span class="punctuation section arguments end python">)</span></span><span class="meta function-call python"><span class="meta qualified-name python"><span class="punctuation accessor dot python">.</span></span><span class="meta qualified-name python"><span class="variable function python"><span class="meta generic-name python">islower</span></span></span></span><span class="meta function-call arguments python"><span class="punctuation section arguments begin python">(</span><span class="punctuation section arguments end python">)</span></span>
<span class="punctuation section sequence end python">]</span></span>
</span></code></pre>
<hr />
<h4><a href="#step-3-try-every-word" aria-hidden="true" class="anchor" id="step-3-try-every-word"></a>Step 3: Try Every Word</h4>
<p>We scan each word in the dictionary and check if it can be formed on the board, using a recursive backtracking function that searches from every matching first letter.</p>
<pre class="language-python"><span class="source python"><span class="meta function python"><span class="storage type function python"><span class="keyword declaration function python">def</span></span> <span class="entity name function python"><span class="meta generic-name python">solve</span></span></span><span class="meta function parameters python"><span class="punctuation section parameters begin python">(</span></span><span class="meta function parameters python"><span class="variable parameter python">board_str</span><span class="punctuation separator parameters python">,</span> <span class="variable parameter python">dictionary</span><span class="punctuation section parameters end python">)</span></span><span class="meta function python"><span class="punctuation section function begin python">:</span></span>
    <span class="constant language python">...</span>
    <span class="keyword control flow return python">return</span> <span class="meta sequence list python"><span class="punctuation section sequence begin python">[</span><span class="meta qualified-name python"><span class="meta generic-name python">w</span></span> <span class="meta expression generator python"><span class="keyword control loop for generator python">for</span> <span class="meta generic-name python">w</span> <span class="keyword control loop for in python">in</span></span> <span class="meta qualified-name python"><span class="meta generic-name python">candidates</span></span> <span class="keyword control conditional if python">if</span> <span class="meta function-call python"><span class="meta qualified-name python"><span class="variable function python"><span class="meta generic-name python">board_has_word</span></span></span></span><span class="meta function-call arguments python"><span class="punctuation section arguments begin python">(</span><span class="meta qualified-name python"><span class="meta generic-name python">board</span></span><span class="punctuation separator arguments python">,</span> <span class="meta qualified-name python"><span class="meta generic-name python">w</span></span><span class="punctuation section arguments end python">)</span></span><span class="punctuation section sequence end python">]</span></span>
</span></code></pre>
<hr />
<h4><a href="#step-4-report-matches" aria-hidden="true" class="anchor" id="step-4-report-matches"></a>Step 4: Report Matches</h4>
<p>Print all valid words found and sort by length or score.</p>
<hr />
<h2><a href="#external-resources" aria-hidden="true" class="anchor" id="external-resources"></a>External Resources</h2>
<ul>
<li><a href="https://manpages.debian.org/stretch/bsdgames/boggle.6">BSDGames Boggle Source</a></li>
<li><a href="https://realpython.com/python-thinking-recursively/">Recursion in Python</a></li>
<li><a href="https://en.wikipedia.org/wiki/Depth-first_search">Depth First Search</a></li>
</ul>
<h2><a href="#stay-in-the-loop" aria-hidden="true" class="anchor" id="stay-in-the-loop"></a>Stay in the Loop</h2>
<p>Have questions or ideas for more coding adventures?
Drop a comment on the video, or suggest the next project idea you want to reinvent!</p>
<p>Thanks for following along, and until next time. Keep reinventing!</p>
]]></content:encoded></item><item><title>Terminal Rainbows in Zig: A Colorful cat-like Tool</title><link>https://letsreinventthewheel.github.io/blog/lolcat</link><description><![CDATA[<p>A small learning project that explores how tools like <code>lolcat</code> create colorful
and animated terminal output. This time we use Zig for the first time to add some
color to our terminal and learn how ANSI escape codes make it all work.</p>
]]></description><author>Kontantin Saveljev</author><guid>https://letsreinventthewheel.github.io/blog/lolcat</guid><pubDate>Tue, 17 Jun 2025 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>Welcome back to <em>Let’s Reinvent the Wheel</em>.
In this project, we explore how terminal text effects like rainbow coloring and simple animation work.
We build a tiny silly Zig program that prints colorful text from stdin.</p>
<h2><a href="#what-youll-learn" aria-hidden="true" class="anchor" id="what-youll-learn"></a>What You’ll Learn</h2>
<p>This project is all about exploring how colorful terminal output works:</p>
<ul>
<li>How to manually generate ANSI escape codes for 24 bit color</li>
<li>How to apply RGB gradients across characters</li>
<li>How to read and process stdin in Zig</li>
<li>How to animate terminal output using carriage returns and redraws</li>
</ul>
<p>We implement all of this with Zig’s standard library, keeping the code small, clean, and educational.</p>
<h2><a href="#project-code" aria-hidden="true" class="anchor" id="project-code"></a>Project Code</h2>
<p>You’ll find the complete source code here: <a href="https://github.com/letsreinventthewheel/silly-cat">silly-cat</a></p>
<h3><a href="#how-it-works" aria-hidden="true" class="anchor" id="how-it-works"></a>How It Works</h3>
<h4><a href="#reading-input-from-stdin" aria-hidden="true" class="anchor" id="reading-input-from-stdin"></a>Reading Input from Stdin</h4>
<p><code>silly-cat</code> reads from standard input line by line using Zig’s <code>streamUntilDelimiter</code>, capturing one line at a time into a buffer:</p>
<pre class="language-zig"><span class="source zig"><span class="variable zig">reader</span>.<span class="variable function zig">streamUntilDelimiter</span><span class="punctuation section parens begin zig">(</span><span class="variable zig">fbs</span>.<span class="variable function zig">writer</span><span class="punctuation section parens begin zig">(</span><span class="punctuation section parens end zig">)</span><span class="punctuation separator zig">,</span> <span class="string quoted single zig">&#39;<span class="constant character escape newline zig">\n</span>&#39;</span><span class="punctuation separator zig">,</span> <span class="variable zig">fbs</span>.<span class="variable zig">buffer</span>.<span class="variable zig">len</span><span class="punctuation section parens end zig">)</span>
</span></code></pre>
<p>This makes it compatible with piped input like:</p>
<pre class="language-sh"><span class="source shell bash"><span class="meta function-call shell"><span class="support function echo shell">echo</span></span><span class="meta function-call arguments shell"> <span class="string quoted double shell"><span class="punctuation definition string begin shell">&quot;</span>hello world<span class="punctuation definition string end shell">&quot;</span></span></span> <span class="keyword operator logical pipe shell">|</span> <span class="meta function-call shell"><span class="variable function shell">silly-cat</span></span>
</span></code></pre>
<p>Each line is processed independently, with a short delay between lines to support the animation effect.</p>
<hr />
<h4><a href="#generating-rainbow-colors" aria-hidden="true" class="anchor" id="generating-rainbow-colors"></a>Generating Rainbow Colors</h4>
<p>For every character on the line, <code>silly-cat</code> calculates a rainbow color using a sine wave offset:</p>
<pre class="language-zig"><span class="source zig"><span class="storage modifier zig">const</span> <span class="variable zig">red</span>   <span class="keyword operator assignment zig">=</span> <span class="support function zig">@sin</span><span class="punctuation section parens begin zig">(</span><span class="variable zig">p</span> <span class="keyword operator arithmetic zig">/</span> <span class="constant numeric float zig">10.0</span><span class="punctuation section parens end zig">)</span> <span class="keyword operator arithmetic zig">*</span> <span class="constant numeric float zig">127.0</span> <span class="keyword operator arithmetic zig">+</span> <span class="constant numeric float zig">128.0</span><span class="punctuation terminator zig">;</span>
<span class="storage modifier zig">const</span> <span class="variable zig">green</span> <span class="keyword operator assignment zig">=</span> <span class="support function zig">@sin</span><span class="punctuation section parens begin zig">(</span><span class="variable zig">p</span> <span class="keyword operator arithmetic zig">/</span> <span class="constant numeric float zig">10.0</span> <span class="keyword operator arithmetic zig">+</span> 2π<span class="keyword operator arithmetic zig">/</span><span class="constant numeric integer zig">3</span><span class="punctuation section parens end zig">)</span> <span class="keyword operator arithmetic zig">*</span> <span class="constant numeric float zig">127.0</span> <span class="keyword operator arithmetic zig">+</span> <span class="constant numeric float zig">128.0</span><span class="punctuation terminator zig">;</span>
<span class="storage modifier zig">const</span> <span class="variable zig">blue</span>  <span class="keyword operator assignment zig">=</span> <span class="support function zig">@sin</span><span class="punctuation section parens begin zig">(</span><span class="variable zig">p</span> <span class="keyword operator arithmetic zig">/</span> <span class="constant numeric float zig">10.0</span> <span class="keyword operator arithmetic zig">+</span> 4π<span class="keyword operator arithmetic zig">/</span><span class="constant numeric integer zig">3</span><span class="punctuation section parens end zig">)</span> <span class="keyword operator arithmetic zig">*</span> <span class="constant numeric float zig">127.0</span> <span class="keyword operator arithmetic zig">+</span> <span class="constant numeric float zig">128.0</span><span class="punctuation terminator zig">;</span>
</span></code></pre>
<p>This produces a smooth hue transition across characters, giving it a “rainbow stream” appearance.</p>
<p>The <code>position</code> of the character and a global <code>offset</code> (which changes slightly between lines) are used to animate the color wave over time.</p>
<hr />
<h4><a href="#writing-colored-output" aria-hidden="true" class="anchor" id="writing-colored-output"></a>Writing Colored Output</h4>
<p>Each character is wrapped with a 24 bit ANSI color escape sequence:</p>
<pre class="language-zig"><span class="source zig"><span class="keyword control conditional zig">try</span> <span class="variable zig">writer</span>.<span class="variable function zig">print</span><span class="punctuation section parens begin zig">(</span><span class="string quoted double zig">&quot;<span class="constant character escape hexidecimal zig">\x1b</span>[38;2;{d};{d};{d}m{c}&quot;</span><span class="punctuation separator zig">,</span> .<span class="punctuation section braces begin zig">{</span> <span class="variable zig">color</span>.<span class="variable zig">r</span><span class="punctuation separator zig">,</span> <span class="variable zig">color</span>.<span class="variable zig">g</span><span class="punctuation separator zig">,</span> <span class="variable zig">color</span>.<span class="variable zig">b</span><span class="punctuation separator zig">,</span> <span class="variable zig">c</span> <span class="punctuation section braces end zig">}</span><span class="punctuation section parens end zig">)</span><span class="punctuation terminator zig">;</span>
</span></code></pre>
<p>At the end of each line, it resets the color with <code>\x1b[0m</code>.</p>
<p>The cursor is hidden at the start (<code>\x1b[?25l</code>) to reduce flicker during animation, and re-shown at the end (<code>\x1b[?25h</code>).</p>
<hr />
<h4><a href="#animation-control" aria-hidden="true" class="anchor" id="animation-control"></a>Animation Control</h4>
<p>The animation is handled by a short sleep (<code>std.time.sleep</code>) between line renders, combined with a moving <code>offset</code> in the color calculation.
This creates a subtle horizontal shimmer effect across multiple lines.</p>
<h2><a href="#tweak-and-expand" aria-hidden="true" class="anchor" id="tweak-and-expand"></a>Tweak and Expand</h2>
<ul>
<li><strong>UTF-8 support</strong>: Right now, the code assumes single byte ASCII characters. Supporting multibyte UTF-8 characters (like emojis or accented letters) requires iterating over codepoints correctly.</li>
<li><strong>File input</strong>: Currently, input is read only from stdin. Add support for reading from files (via command line arguments).</li>
<li><strong>Multiple animation styles</strong>: You could implement vertical “wiggle”, character jitter, or scrolling.</li>
<li><strong>Custom gradients</strong>: Try using HSV interpolation, or let users pass in a color palette.</li>
</ul>
<h2><a href="#external-resources" aria-hidden="true" class="anchor" id="external-resources"></a>External Resources</h2>
<ul>
<li><a href="https://notes.burke.libbey.me/ansi-escape-codes/">Everything you never wanted to know about ANSI escape codes</a></li>
<li><a href="https://gist.github.com/fnky/458719343aabd01cfb17a3a4f7296797">ANSI Escape Codes GIST</a></li>
<li><a href="https://github.com/busyloop/lolcat">lolcat</a> - a terminal colorizer that inspired this project</li>
<li><a href="https://graphtoy.com/">graphtoy</a> - easy graphing of functions</li>
<li><a href="https://ziglang.org/documentation/master/">Zig language documentation</a></li>
</ul>
]]></content:encoded></item><item><title>Doom Fire Animation with PPM and mpv</title><link>https://letsreinventthewheel.github.io/blog/doom-fire-animation</link><description><![CDATA[<p>Learn how to create a mesmerizing Doom Fire animation from scratch in C11, using
only the PPM image format and mpv for display. This hands-on tutorial walks you
through simulating classic pixel fire in a modern C environment, without any graphics
libraries - just raw image output and a powerful video player.</p>
]]></description><author>Kontantin Saveljev</author><guid>https://letsreinventthewheel.github.io/blog/doom-fire-animation</guid><pubDate>Fri, 30 May 2025 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>Welcome back to <em>Let’s Reinvent the Wheel</em>.
In this project, we bring the iconic “Doom Fire” animation to life using pure C11, the simplest PPM image format, and <a href="https://mpv.io/">mpv</a> as our display engine. If you want to make fire on your terminal with <em>zero</em> dependencies beyond your compiler and a media player, this is the perfect starting point.</p>
<hr />
<h2><a href="#what-youll-learn" aria-hidden="true" class="anchor" id="what-youll-learn"></a>What You’ll Learn</h2>
<p>In this episode, you will:</p>
<ul>
<li>Explore the <strong>Doom Fire</strong> algorithm and how it works</li>
<li>Implement a full simulation loop in modern <strong>C11</strong></li>
<li>Use the portable <a href="https://en.wikipedia.org/wiki/Netpbm_format#PPM_example">PPM (P6)</a> format to output images frame by frame</li>
<li>Pipe your animation directly into <code>mpv</code> to display it (no windowing or GUI required)</li>
<li>Tweak parameters to create pixel perfect retro effects, or scale up for a modern, high resolution blaze</li>
</ul>
<p>By the end, you’ll have a pixel fire demo that’s blazing on your screen and ready for further hacks (all of that without touching any graphics libraries).</p>
<hr />
<h2><a href="#project-code" aria-hidden="true" class="anchor" id="project-code"></a>Project Code</h2>
<p>You’ll find the complete source code here: <a href="https://github.com/letsreinventthewheel/doomfire">doomfire</a></p>
<h3><a href="#how-it-works" aria-hidden="true" class="anchor" id="how-it-works"></a><strong>How it works:</strong></h3>
<ul>
<li><strong>Simulate</strong> a fire buffer where each pixel’s intensity is updated using random decay and spreading.</li>
<li><strong>Render</strong> each frame as a raw PPM (P6) image, writing directly to stdout.</li>
<li><strong>Display</strong> in real time by piping your program’s output to <code>mpv</code>, which interprets the image stream as a video.</li>
</ul>
<p><strong>To run:</strong></p>
<pre class="language-sh"><span class="source shell bash"><span class="meta function-call shell"><span class="variable function shell">gcc</span></span><span class="meta function-call arguments shell"><span class="variable parameter option shell"><span class="punctuation definition parameter shell"> -</span>std</span><span class="keyword operator assignment option shell">=</span>c11<span class="variable parameter option shell"><span class="punctuation definition parameter shell"> -</span>O3</span><span class="variable parameter option shell"><span class="punctuation definition parameter shell"> -</span>o</span> doomfire doomfire.c</span>
<span class="meta function-call shell"><span class="variable function shell">./doomfire</span></span> <span class="keyword operator logical pipe shell">|</span> <span class="meta function-call shell"><span class="variable function shell">mpv</span></span><span class="meta function-call arguments shell"> -</span>
</span></code></pre>
<blockquote>
<p>No graphics dependencies, no window management - only <code>mpv</code> as <a href="https://en.wikipedia.org/wiki/Most_valuable_player">MVP</a></p>
</blockquote>
<hr />
<h2><a href="#tweak-and-expand" aria-hidden="true" class="anchor" id="tweak-and-expand"></a>Tweak and Expand</h2>
<ul>
<li>Adjust fire size, scaling, and palette to match your aesthetic.</li>
<li>Overlay fire onto other images, or add simple alpha blending for cool effects.</li>
<li>Try increasing the scale factor for a more “blocky” fire, or experiment with different color palettes.</li>
</ul>
<hr />
<h2><a href="#external-resources" aria-hidden="true" class="anchor" id="external-resources"></a>External Resources</h2>
<p>If you want to dig deeper, check out these resources:</p>
<ul>
<li><a href="https://netpbm.sourceforge.net/doc/ppm.html">PPM Format Documentation</a></li>
<li><a href="https://fabiensanglard.net/doom_fire_psx/">How Doom Fire Was Done</a></li>
<li><a href="https://mpv.io/manual/master/">mpv User Guide</a></li>
</ul>
<hr />
<h2><a href="#stay-in-the-loop" aria-hidden="true" class="anchor" id="stay-in-the-loop"></a>Stay in the Loop</h2>
<p>Have questions or ideas for more coding adventures?
Drop a comment on the video, or suggest the next project idea you want to reinvent!</p>
<p>Thanks for following along, and until next time. Keep reinventing!</p>
]]></content:encoded></item><item><title>Build Your Own RoyalRoad to EPUB Converter</title><link>https://letsreinventthewheel.github.io/blog/royal-road-to-epub</link><description><![CDATA[<p>Learn how to build a simple Python script that scrapes stories from RoyalRoad
and converts them into EPUB files for offline reading. This beginner friendly
project uses <code>BeautifulSoup</code>, <code>requests</code>, and <code>EbookLib</code> to walk you through a
full pipeline from HTML scraping to ebook generation. A perfect start for anyone
looking to automate something useful.</p>
]]></description><author>Kontantin Saveljev</author><guid>https://letsreinventthewheel.github.io/blog/royal-road-to-epub</guid><pubDate>Sat, 24 May 2025 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>Welcome back to <em>Let’s Reinvent the Wheel</em>. In our first hands-on project, we build
a Python-based tool that lets you scrape <a href="https://www.royalroad.com">RoyalRoad</a> stories and convert them into
EPUB files. Perfect for offline reading on e-readers.</p>
<p>This project is aimed at beginner-to-intermediate developers looking to sharpen their
skills while creating something genuinely useful. As a result we get a tiny tool, which
leans on a few powerful libraries like <code>requests</code>, <code>BeautifulSoup</code>, and <code>EbookLib</code>.</p>
<h2><a href="#what-youll-learn" aria-hidden="true" class="anchor" id="what-youll-learn"></a>What You’ll Learn</h2>
<p>In this episode, we:</p>
<ul>
<li>Analyze the HTML structure of <a href="https://www.royalroad.com">RoyalRoad</a> story pages</li>
<li>Use <code>requests</code> to fetch page content</li>
<li>Extract and clean data with <code>BeautifulSoup</code></li>
<li>Format chapters and metadata for EPUB generation</li>
<li>Use <code>EbookLib</code> to output a polished .epub file</li>
<li>Package everything into a script you can reuse or extend</li>
</ul>
<p>This is a full walkthrough of a minimal but complete content pipeline - scraping to final EPUB.</p>
<h2><a href="#project-code" aria-hidden="true" class="anchor" id="project-code"></a>Project Code</h2>
<p>The full source code is available here: <a href="https://github.com/letsreinventthewheel/royalroad2epub">royalroad2epub</a></p>
<h2><a href="#documentation" aria-hidden="true" class="anchor" id="documentation"></a>Documentation</h2>
<p>These are helpful docs of the libraries which we used in this video:</p>
<ul>
<li><a href="https://requests.readthedocs.io/en/latest/">Requests documentation</a></li>
<li><a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/">BeautifulSoup documentation</a></li>
<li><a href="https://docs.sourcefabric.org/projects/ebooklib/en/latest/tutorial.html#creating-epub">EbookLib documentation</a></li>
</ul>
<h2><a href="#stay-in-the-loop" aria-hidden="true" class="anchor" id="stay-in-the-loop"></a>Stay in the Loop</h2>
<p>Have questions, ideas, or something you’d like me to reinvent next? Drop a comment on the video!</p>
<p>Thanks for watching, and until next time. Keep reinventing!</p>
]]></content:encoded></item><item><title>The Start of Something New</title><link>https://letsreinventthewheel.github.io/blog/intro-post</link><description><![CDATA[<p>Let’s Reinvent the Wheel is all about learning by building from scratch.
We’re starting with an empty GitHub and LeetCode profile, exploring backend,
frontend, and interview prep. The goal is to recreate existing tools and ideas
to truly understand how they work. No fixed roadmap — just hands-on projects
that challenge and teach</p>
]]></description><author>Kontantin Saveljev</author><guid>https://letsreinventthewheel.github.io/blog/intro-post</guid><pubDate>Wed, 21 May 2025 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>There’s only one way to truly understand how things work: <strong>build them yourself</strong>.</p>
<p>That’s what this journey is all about. We’re here to learn, inspect, and recreate
existing tools, libraries, and ideas - not just for the sake of it, but to build
real knowledge. And along the way, we’re going to document everything, growing a
GitHub profile that is a collection of all sorts of projects, a showcase of what
we’ve learned and built. A portfolio that could, one day, help land a job.</p>
<p>But right now? <strong>We’re starting from zero</strong>.</p>
<ul>
<li>📂 No repositories.</li>
<li>📝 No solved LeetCode problems.</li>
<li>🛠️ No half-finished projects.</li>
</ul>
<p>Just a blank slate and an open-ended path forward.</p>
<h2><a href="#what-this-is-all-about" aria-hidden="true" class="anchor" id="what-this-is-all-about"></a>What This Is All About</h2>
<p><em>Let’s Reinvent the Wheel</em> isn’t about following a fixed roadmap or gradually increasing
difficulty. Some projects will be simple, others more complex. One day, we might build a
tiny utility. Another day, we could dive deep into a couple month long project.</p>
<p>We’re not locked into a single vertical - sometimes we’ll be in backend, other times frontend,
sometimes we’ll explore what it’s like to prepare for technical interviews using LeetCode.
After all, one of our goals with this GitHub journey is to create a strong profile that
could actually help us land a job.</p>
<p>And here’s something important: <strong>we’re not trying to invent brand-new things</strong>. A lot of what
we’ll build will be inspired by or directly rebuilt based on existing work. Because the best
way to truly understand something is to take it apart and rebuild it yourself.</p>
<h2><a href="#how-we-approach-this" aria-hidden="true" class="anchor" id="how-we-approach-this"></a>How We Approach This</h2>
<ul>
<li>Not just “what” but “how” and “why”. We’re here to understand what we write, not just follow tutorials.</li>
<li>No single track. Backend, frontend, problem-solving, automation - whatever interests us, we’ll explore.</li>
<li>We stand on the shoulders of giants. Our projects won’t always be original, and that’s the point.</li>
</ul>
<h2><a href="#the-journey-starts-now" aria-hidden="true" class="anchor" id="the-journey-starts-now"></a>The Journey Starts Now</h2>
<p>From here, we jump right in. No predefined order, no rigid path - just a series of projects
that challenge, teach, and (hopefully) inspire.</p>
<p>If that sounds like your kind of thing, <strong>subscribe</strong>, check out the blog, and let’s start building.</p>
<p><em>Let’s Reinvent the Wheel</em> - not because we have to, but because we want to 🚀</p>
]]></content:encoded></item></channel></rss>
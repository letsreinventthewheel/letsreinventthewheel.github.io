<?xml version="1.0" encoding="utf-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Let&apos;s Reinvent the Wheel</title><link>https://letsreinventthewheel.github.io</link><description>Let&apos;s Reinvent the Wheel: a companion space to my YouTube channel</description><language>en-us</language><copyright>2025 Let&apos;s Reinvent the Wheel</copyright><managingEditor>letsreinventthewheelyt@gmail.com</managingEditor><webMaster>letsreinventthewheelyt@gmail.com</webMaster><lastBuildDate>Fri, 27 Jun 2025 09:37:27 +0000</lastBuildDate><item><title>0n0FF: Teaching a Puzzle to Solve Itself</title><link>https://letsreinventthewheel.github.io/blog/onoff-solver</link><description><![CDATA[<p>We extend 0n0FF with a real time solver powered by Breadth First Search (BFS) and
bit manipulation. Learn how to compute perfect puzzle solutions and guide players
with subtle visual hints - all in <code>React</code> and <code>TypeScript</code>.</p>
]]></description><author>Kontantin Saveljev</author><guid>https://letsreinventthewheel.github.io/blog/onoff-solver</guid><pubDate>Fri, 27 Jun 2025 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>In <a href="https://letsreinventthewheel.github.io/blog/onoff/">previous</a> episode we built <strong>0n0FF</strong>, a minimalist tile flipping puzzle game in <code>React</code> and <code>TypeScript</code>. This time we’re giving our game a brain.</p>
<p>We are adding a <strong>solver</strong> that can compute the optimal solution to any board state and then <strong>show the next best move</strong> directly to the player using a subtle, gray toned guide beneath the main board.</p>
<h2><a href="#what-youll-learn" aria-hidden="true" class="anchor" id="what-youll-learn"></a>What You’ll Learn</h2>
<ul>
<li>How to <strong>solve a logic puzzle with breadth first search (BFS)</strong></li>
<li>How to <strong>represent board states as bitmasks</strong> for performance</li>
<li>How to <strong>integrate a solver into an interactive React UI</strong></li>
<li>How to <strong>visualize solver hints</strong> without distracting from gameplay</li>
<li>Why immutability and clean state separation matter</li>
</ul>
<h2><a href="#project-code" aria-hidden="true" class="anchor" id="project-code"></a>Project Code</h2>
<p>You’ll find the complete source code here: <a href="https://github.com/letsreinventthewheel/0n0ff-puzzle">0n0ff-puzzle</a></p>
<h3><a href="#how-it-works" aria-hidden="true" class="anchor" id="how-it-works"></a>How It Works</h3>
<p>The core idea is simple: treat each board state as a node in a graph. A move transforms one state into another and we search for the <strong>shortest path</strong> to the win condition (all green tiles).</p>
<p>To avoid visiting the same state twice we encode the board as a single integer (a <strong>bitmask</strong> of 16 bits for a 4x4 grid). This turns a potentially slow puzzle solver into a <strong>blazing fast</strong> pathfinder.</p>
<pre class="language-ts"><span class="source ts"><span class="meta var expr ts"><span class="storage type ts">const</span> <span class="meta var-single-variable expr ts"><span class="meta definition variable ts"><span class="variable other constant ts"><span class="entity name function ts">hash</span></span></span> </span><span class="keyword operator assignment ts">=</span><span class="meta arrow ts"> <span class="meta parameters ts"><span class="punctuation definition parameters begin ts">(</span><span class="variable parameter ts">grid</span><span class="meta type annotation ts"><span class="keyword operator type annotation ts">:</span> <span class="entity name type ts">Grid</span></span><span class="punctuation definition parameters end ts">)</span></span><span class="meta return type arrow ts"><span class="keyword operator type annotation ts">:</span> <span class="support type primitive ts">number</span> </span></span><span class="meta arrow ts"><span class="storage type function arrow ts">=&gt;</span> <span class="meta block ts"><span class="punctuation definition block ts">{</span>
  <span class="meta var expr ts"><span class="storage type ts">let</span> <span class="meta var-single-variable expr ts"><span class="meta definition variable ts"><span class="variable other readwrite ts">result</span></span> </span><span class="keyword operator assignment ts">=</span> <span class="constant numeric decimal ts">0</span></span><span class="punctuation terminator statement ts">;</span>
  <span class="keyword control loop ts">for</span> <span class="meta brace round ts">(</span><span class="meta var expr ts"><span class="storage type ts">let</span> <span class="meta var-single-variable expr ts"><span class="meta definition variable ts"><span class="variable other readwrite ts">r</span></span> </span><span class="keyword operator assignment ts">=</span> <span class="constant numeric decimal ts">0</span></span><span class="punctuation terminator statement ts">;</span> <span class="variable other readwrite ts">r</span> <span class="keyword operator relational ts">&lt;</span> <span class="variable other constant ts">GRID_SIZE</span><span class="punctuation terminator statement ts">;</span> <span class="variable other readwrite ts">r</span><span class="keyword operator increment ts">++</span><span class="meta brace round ts">)</span> <span class="meta block ts"><span class="punctuation definition block ts">{</span>
    <span class="keyword control loop ts">for</span> <span class="meta brace round ts">(</span><span class="meta var expr ts"><span class="storage type ts">let</span> <span class="meta var-single-variable expr ts"><span class="meta definition variable ts"><span class="variable other readwrite ts">c</span></span> </span><span class="keyword operator assignment ts">=</span> <span class="constant numeric decimal ts">0</span></span><span class="punctuation terminator statement ts">;</span> <span class="variable other readwrite ts">c</span> <span class="keyword operator relational ts">&lt;</span> <span class="variable other constant ts">GRID_SIZE</span><span class="punctuation terminator statement ts">;</span> <span class="variable other readwrite ts">c</span><span class="keyword operator increment ts">++</span><span class="meta brace round ts">)</span> <span class="meta block ts"><span class="punctuation definition block ts">{</span>
      <span class="keyword control conditional ts">if</span> <span class="meta brace round ts">(</span><span class="variable other readwrite ts">grid</span><span class="meta array literal ts"><span class="meta brace square ts">[</span><span class="variable other readwrite ts">r</span><span class="meta brace square ts">]</span></span><span class="meta array literal ts"><span class="meta brace square ts">[</span><span class="variable other readwrite ts">c</span><span class="meta brace square ts">]</span></span><span class="meta brace round ts">)</span> <span class="meta block ts"><span class="punctuation definition block ts">{</span>
        <span class="variable other readwrite ts">result</span> <span class="keyword operator assignment compound bitwise ts">|=</span> <span class="constant numeric decimal ts">1</span> <span class="keyword operator bitwise shift ts">&lt;&lt;</span> <span class="meta brace round ts">(</span><span class="variable other readwrite ts">r</span> <span class="keyword operator arithmetic ts">*</span> <span class="variable other constant ts">GRID_SIZE</span> <span class="keyword operator arithmetic ts">+</span> <span class="variable other readwrite ts">c</span><span class="meta brace round ts">)</span><span class="punctuation terminator statement ts">;</span>
      <span class="punctuation definition block ts">}</span></span>
    <span class="punctuation definition block ts">}</span></span>
  <span class="punctuation definition block ts">}</span></span>
  <span class="keyword control flow ts">return</span> <span class="variable other readwrite ts">result</span><span class="punctuation terminator statement ts">;</span>
<span class="punctuation definition block ts">}</span></span></span></span><span class="punctuation terminator statement ts">;</span>
</span></code></pre>
<hr />
<h4><a href="#breadth-first-search-bfs" aria-hidden="true" class="anchor" id="breadth-first-search-bfs"></a>Breadth First Search (BFS)</h4>
<p>Using a BFS loop we explore all possible move sequences from the current board state, stopping the moment we find a winning path.</p>
<pre class="language-ts"><span class="source ts"><span class="keyword control loop ts">while</span> <span class="meta brace round ts">(</span><span class="variable other object ts">queue</span><span class="punctuation accessor ts">.</span><span class="support variable property ts">length</span><span class="meta brace round ts">)</span> <span class="meta block ts"><span class="punctuation definition block ts">{</span>
  <span class="meta var expr ts"><span class="storage type ts">const</span> <span class="meta object-binding-pattern-variable ts"><span class="punctuation definition binding-pattern object ts">{</span> <span class="meta definition variable ts"><span class="variable other constant ts">grid</span></span><span class="punctuation separator comma ts">,</span> <span class="meta definition variable ts"><span class="variable other constant ts">moves</span></span> <span class="punctuation definition binding-pattern object ts">}</span> </span><span class="keyword operator assignment ts">=</span> <span class="meta function-call ts"><span class="variable other object ts">queue</span><span class="punctuation accessor ts">.</span><span class="support function ts">shift</span></span><span class="meta brace round ts">(</span><span class="meta brace round ts">)</span></span><span class="punctuation terminator statement ts">;</span>
  <span class="keyword control conditional ts">if</span> <span class="meta brace round ts">(</span><span class="meta function-call ts"><span class="entity name function ts">isWon</span></span><span class="meta brace round ts">(</span><span class="variable other readwrite ts">grid</span><span class="meta brace round ts">)</span><span class="meta brace round ts">)</span> <span class="keyword control flow ts">return</span> <span class="variable other readwrite ts">moves</span><span class="punctuation terminator statement ts">;</span>
<span class="punctuation whitespace comment leading ts">  </span><span class="comment line double-slash ts"><span class="punctuation definition comment ts">//</span></span><span class="comment line double-slash ts"> Try all 16 next moves</span>
<span class="punctuation definition block ts">}</span></span>
</span></code></pre>
<p>Each move toggles an entire row and column which we simulate using XOR on the bitmask.</p>
<h4><a href="#solver-integration" aria-hidden="true" class="anchor" id="solver-integration"></a>Solver Integration</h4>
<p>Once the solver is in place, we run it:</p>
<ul>
<li>At the <strong>start of each new game</strong></li>
<li>After <strong>every player move</strong></li>
</ul>
<p>This allows us to continuously maintain an <strong>up to date optimal path</strong> to the win state. The next move is then shown to the player (but only subtly).</p>
<h4><a href="#visualizing-the-hint" aria-hidden="true" class="anchor" id="visualizing-the-hint"></a>Visualizing the Hint</h4>
<p>Beneath the main board we render a <strong>semi transparent, grayscale copy</strong> of the grid with a <strong>darker highlight</strong> on the next suggested move:</p>
<pre class="language-tsx"><span class="source tsx"><span class="meta tag tsx"><span class="punctuation definition tag begin tsx">&lt;</span><span class="entity name tag tsx">div</span><span class="meta tag attributes tsx">
  <span class="entity other attribute-name tsx">className</span><span class="keyword operator assignment tsx">=</span><span class="punctuation section embedded begin tsx">{</span><span class="meta embedded expression tsx"><span class="string template tsx"><span class="punctuation definition string template begin tsx">`</span>solution-cell <span class="meta template expression tsx"><span class="punctuation definition template-expression begin tsx">${</span></span><span class="meta template expression tsx"><span class="meta embedded line tsx">
    <span class="variable other object tsx">nextMove</span><span class="punctuation accessor tsx">.</span><span class="variable other property tsx">row</span> <span class="keyword operator comparison tsx">===</span> <span class="variable other readwrite tsx">rowIdx</span> <span class="keyword operator logical tsx">&amp;&amp;</span> <span class="variable other object tsx">nextMove</span><span class="punctuation accessor tsx">.</span><span class="variable other property tsx">column</span> <span class="keyword operator comparison tsx">===</span> <span class="variable other readwrite tsx">cellIdx</span> <span class="keyword operator ternary tsx">?</span> <span class="string quoted double tsx"><span class="punctuation definition string begin tsx">&quot;</span>next-move<span class="punctuation definition string end tsx">&quot;</span></span> <span class="keyword operator ternary tsx">:</span> <span class="string quoted double tsx"><span class="punctuation definition string begin tsx">&quot;</span><span class="punctuation definition string end tsx">&quot;</span></span>
  </span><span class="punctuation definition template-expression end tsx">}</span></span><span class="punctuation definition string template end tsx">`</span></span></span><span class="punctuation section embedded end tsx">}</span>
</span><span class="punctuation definition tag end tsx">/&gt;</span></span>
</span></code></pre>
<p>And in CSS:</p>
<pre class="language-css"><span class="source css"><span class="meta selector css"><span class="entity other attribute-name class css"><span class="punctuation definition entity css">.</span>solution-cell</span><span class="entity other attribute-name class css"><span class="punctuation definition entity css">.</span>next-move</span> </span><span class="meta property-list css"><span class="punctuation section property-list css">{</span>
  <span class="meta property-name css"><span class="support type property-name css">background</span></span><span class="punctuation separator key-value css">:</span><span class="meta property-value css"> </span><span class="meta property-value css"><span class="meta function-call css"><span class="support function color css">rgba</span><span class="meta group css"><span class="punctuation definition group begin css">(</span><span class="constant numeric integer decimal css">20</span><span class="punctuation separator sequence css">,</span> <span class="constant numeric integer decimal css">20</span><span class="punctuation separator sequence css">,</span> <span class="constant numeric integer decimal css">20</span><span class="punctuation separator sequence css">,</span> <span class="constant numeric float decimal css">0<span class="punctuation separator decimal css">.</span>6</span></span><span class="meta group css"><span class="punctuation definition group end css">)</span></span></span></span><span class="punctuation terminator rule css">;</span>
  <span class="meta property-name css"><span class="support type property-name css">border</span></span><span class="punctuation separator key-value css">:</span><span class="meta property-value css"> </span><span class="meta property-value css"><span class="constant numeric integer decimal css">1<span class="keyword other unit css">px</span></span> <span class="support constant property-value css">solid</span> <span class="meta function-call css"><span class="support function color css">rgba</span><span class="meta group css"><span class="punctuation definition group begin css">(</span><span class="constant numeric integer decimal css">30</span><span class="punctuation separator sequence css">,</span> <span class="constant numeric integer decimal css">30</span><span class="punctuation separator sequence css">,</span> <span class="constant numeric integer decimal css">30</span><span class="punctuation separator sequence css">,</span> <span class="constant numeric float decimal css">0<span class="punctuation separator decimal css">.</span>8</span></span><span class="meta group css"><span class="punctuation definition group end css">)</span></span></span></span><span class="punctuation terminator rule css">;</span>
  <span class="meta property-name css"><span class="support type property-name css">box-shadow</span></span><span class="punctuation separator key-value css">:</span><span class="meta property-value css"> </span><span class="meta property-value css"><span class="constant numeric integer decimal css">0</span> <span class="constant numeric integer decimal css">0</span> <span class="constant numeric integer decimal css">4<span class="keyword other unit css">px</span></span> <span class="meta function-call css"><span class="support function color css">rgba</span><span class="meta group css"><span class="punctuation definition group begin css">(</span><span class="constant numeric integer decimal css">100</span><span class="punctuation separator sequence css">,</span> <span class="constant numeric integer decimal css">100</span><span class="punctuation separator sequence css">,</span> <span class="constant numeric integer decimal css">100</span><span class="punctuation separator sequence css">,</span> <span class="constant numeric float decimal css">0<span class="punctuation separator decimal css">.</span>8</span></span><span class="meta group css"><span class="punctuation definition group end css">)</span></span></span></span><span class="punctuation terminator rule css">;</span>
  <span class="meta property-name css"><span class="support type property-name css">filter</span></span><span class="punctuation separator key-value css">:</span><span class="meta property-value css"> </span><span class="meta property-value css"><span class="meta function-call css"><span class="support function filter css">blur</span><span class="meta group css"><span class="punctuation definition group begin css">(</span><span class="constant numeric float decimal css">0<span class="punctuation separator decimal css">.</span>8<span class="keyword other unit css">px</span></span></span><span class="meta group css"><span class="punctuation definition group end css">)</span></span></span></span><span class="punctuation terminator rule css">;</span>
</span><span class="punctuation section property-list css">}</span>
</span></code></pre>
<hr />
<h4><a href="#pure-state-clean-react" aria-hidden="true" class="anchor" id="pure-state-clean-react"></a>Pure State, Clean React</h4>
<p>To keep things clean and reactive:</p>
<ul>
<li>We <strong>track both the initial and current board state</strong></li>
<li>The solver output is stored in <code>state.solver</code></li>
<li>We added a <strong>“Reset Game”</strong> button to return to the initial configuration</li>
</ul>
<p>This ensures the solver always computes from the true current board and allows for easy restarts or comparisons.</p>
<h4><a href="#performance" aria-hidden="true" class="anchor" id="performance"></a>Performance</h4>
<p>Thanks to bit manipulation and BFS:</p>
<ul>
<li>Solving from any state is <strong>instant</strong></li>
<li>We support <strong>perfect solutions</strong> on every move</li>
<li>No async, no lag, no external dependencies</li>
</ul>
<h4><a href="#final-touches" aria-hidden="true" class="anchor" id="final-touches"></a>Final Touches</h4>
<p>We updated the <strong>header</strong> to show:</p>
<ul>
<li>The number of remaining moves in the current optimal path</li>
<li>The original minimum solution length (for comparison)</li>
</ul>
<p>This adds a layer of motivation for players trying to solve it on their own.</p>
<h2><a href="#future-ideas" aria-hidden="true" class="anchor" id="future-ideas"></a>Future Ideas</h2>
<ul>
<li>Animate the full solution path step by step</li>
<li>Let players <strong>request a hint</strong> only when needed</li>
<li>Track player vs solver efficiency</li>
<li>Add different grid sizes or random move obfuscation</li>
</ul>
<h2><a href="#external-resources" aria-hidden="true" class="anchor" id="external-resources"></a>External Resources</h2>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Breadth-first_search">Breadth-first search</a></li>
<li><a href="https://www.geeksforgeeks.org/breadth-first-search-or-bfs-for-a-graph/">Breadth First Search of BFS for a Graph</a></li>
<li><a href="https://en.wikipedia.org/wiki/Bitwise_operation">Bitwise operation</a></li>
<li><a href="https://sassafras13.github.io/BitManipulation/">Bit Manipulation</a></li>
</ul>
]]></content:encoded></item><item><title>0n0FF: A Flipping Puzzle in React</title><link>https://letsreinventthewheel.github.io/blog/onoff</link><description><![CDATA[<p>A compact logic puzzle where every click flips an entire row and column.
Using <code>TypeScript</code>, <code>React</code>, <code>Context</code>, and <code>Reducers</code>, we implement the game
from scratch with a clean, minimal UI and satisfying interactions</p>
]]></description><author>Kontantin Saveljev</author><guid>https://letsreinventthewheel.github.io/blog/onoff</guid><pubDate>Thu, 26 Jun 2025 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>Welcome back to <em>Let’s Reinvent the Wheel</em>.</p>
<p>In this project we build a minimalist logic puzzle called <code>0n0FF</code> using <code>React</code> and <code>TypeScript</code>.
A 4x4 grid game where each move flips a row and column, and the goal is to turn all tiles
green with as few moves as possible.</p>
<h2><a href="#what-youll-learn" aria-hidden="true" class="anchor" id="what-youll-learn"></a>What You’ll Learn</h2>
<p>By the end of this project you’ll understand how to:</p>
<ul>
<li><strong>Model puzzle logic</strong> using a reducer based state machine in React.</li>
<li><strong>Design a grid based toggle mechanic</strong> that affects rows and columns.</li>
<li><strong>Leverage React Context</strong> for clean and reusable global state.</li>
<li><strong>Style interactive components</strong> with CSS for feedback and animations.</li>
</ul>
<p>Whether you’re learning React, exploring puzzle mechanics, or just love brain teasers, this mini project packs a lot of value in a small footprint.</p>
<h2><a href="#project-code" aria-hidden="true" class="anchor" id="project-code"></a>Project Code</h2>
<p>You’ll find the complete source code here: <a href="https://github.com/letsreinventthewheel/0n0ff-puzzle">0n0ff-puzzle</a></p>
<h3><a href="#how-it-works" aria-hidden="true" class="anchor" id="how-it-works"></a>How It Works</h3>
<p>This project is written in <strong>React + TypeScript</strong>, styled with simple <strong>CSS Modules</strong>, and designed to be a compact and fun codebase to explore UI state management and puzzle logic.</p>
<p>We manage game state with a reducer (<code>useReducer</code>) and isolate logic in a <code>GameContext</code> to keep components clean and focused.</p>
<h4><a href="#game-mechanics" aria-hidden="true" class="anchor" id="game-mechanics"></a>Game Mechanics</h4>
<ul>
<li>A 4x4 grid of cells.</li>
<li>Each cell is either <strong>green (on)</strong> or <strong>red (off)</strong>.</li>
<li>Clicking a cell toggles the entire <strong>row</strong> and the entire <strong>column</strong></li>
<li>Goal: Make <strong>every cell green</strong>.</li>
</ul>
<h4><a href="#game-logic-breakdown" aria-hidden="true" class="anchor" id="game-logic-breakdown"></a>Game Logic Breakdown</h4>
<pre class="language-ts"><span class="source ts"><span class="meta var expr ts"><span class="storage type ts">const</span> <span class="meta var-single-variable expr ts"><span class="meta definition variable ts"><span class="variable other constant ts"><span class="entity name function ts">toggleCell</span></span></span> </span><span class="keyword operator assignment ts">=</span><span class="meta arrow ts"> <span class="meta parameters ts"><span class="punctuation definition parameters begin ts">(</span><span class="variable parameter ts">grid</span><span class="punctuation separator parameter ts">,</span> <span class="variable parameter ts">row</span><span class="punctuation separator parameter ts">,</span> <span class="variable parameter ts">column</span><span class="punctuation definition parameters end ts">)</span></span> </span><span class="meta arrow ts"><span class="storage type function arrow ts">=&gt;</span> <span class="meta block ts"><span class="punctuation definition block ts">{</span>
  <span class="meta var expr ts"><span class="storage type ts">const</span> <span class="meta var-single-variable expr ts"><span class="meta definition variable ts"><span class="variable other constant ts">newGrid</span></span> </span><span class="keyword operator assignment ts">=</span> <span class="meta function-call ts"><span class="entity name function ts">structuredClone</span></span><span class="meta brace round ts">(</span><span class="variable other readwrite ts">grid</span><span class="meta brace round ts">)</span></span><span class="punctuation terminator statement ts">;</span>
  <span class="keyword control loop ts">for</span> <span class="meta brace round ts">(</span><span class="meta var expr ts"><span class="storage type ts">let</span> <span class="meta var-single-variable expr ts"><span class="meta definition variable ts"><span class="variable other readwrite ts">r</span></span> </span><span class="keyword operator assignment ts">=</span> <span class="constant numeric decimal ts">0</span></span><span class="punctuation terminator statement ts">;</span> <span class="variable other readwrite ts">r</span> <span class="keyword operator relational ts">&lt;</span> <span class="constant numeric decimal ts">4</span><span class="punctuation terminator statement ts">;</span> <span class="variable other readwrite ts">r</span><span class="keyword operator increment ts">++</span><span class="meta brace round ts">)</span> <span class="meta block ts"><span class="punctuation definition block ts">{</span>
    <span class="keyword control loop ts">for</span> <span class="meta brace round ts">(</span><span class="meta var expr ts"><span class="storage type ts">let</span> <span class="meta var-single-variable expr ts"><span class="meta definition variable ts"><span class="variable other readwrite ts">c</span></span> </span><span class="keyword operator assignment ts">=</span> <span class="constant numeric decimal ts">0</span></span><span class="punctuation terminator statement ts">;</span> <span class="variable other readwrite ts">c</span> <span class="keyword operator relational ts">&lt;</span> <span class="constant numeric decimal ts">4</span><span class="punctuation terminator statement ts">;</span> <span class="variable other readwrite ts">c</span><span class="keyword operator increment ts">++</span><span class="meta brace round ts">)</span> <span class="meta block ts"><span class="punctuation definition block ts">{</span>
      <span class="keyword control conditional ts">if</span> <span class="meta brace round ts">(</span><span class="variable other readwrite ts">r</span> <span class="keyword operator comparison ts">===</span> <span class="variable other readwrite ts">row</span> <span class="keyword operator logical ts">||</span> <span class="variable other readwrite ts">c</span> <span class="keyword operator comparison ts">===</span> <span class="variable other readwrite ts">column</span><span class="meta brace round ts">)</span> <span class="meta block ts"><span class="punctuation definition block ts">{</span>
        <span class="variable other readwrite ts">newGrid</span><span class="meta array literal ts"><span class="meta brace square ts">[</span><span class="variable other readwrite ts">r</span><span class="meta brace square ts">]</span></span><span class="meta array literal ts"><span class="meta brace square ts">[</span><span class="variable other readwrite ts">c</span><span class="meta brace square ts">]</span></span> <span class="keyword operator assignment ts">=</span> <span class="keyword operator logical ts">!</span><span class="variable other readwrite ts">newGrid</span><span class="meta array literal ts"><span class="meta brace square ts">[</span><span class="variable other readwrite ts">r</span><span class="meta brace square ts">]</span></span><span class="meta array literal ts"><span class="meta brace square ts">[</span><span class="variable other readwrite ts">c</span><span class="meta brace square ts">]</span></span><span class="punctuation terminator statement ts">;</span>
      <span class="punctuation definition block ts">}</span></span>
    <span class="punctuation definition block ts">}</span></span>
  <span class="punctuation definition block ts">}</span></span>
  <span class="keyword control flow ts">return</span> <span class="variable other readwrite ts">newGrid</span><span class="punctuation terminator statement ts">;</span>
<span class="punctuation definition block ts">}</span></span></span></span><span class="punctuation terminator statement ts">;</span>
</span></code></pre>
<p>Each click affects the full row and column: a mechanic that quickly scrambles your carefully laid plans 😅</p>
<h4><a href="#why-this-puzzle" aria-hidden="true" class="anchor" id="why-this-puzzle"></a>Why This Puzzle?</h4>
<p>The challenge is subtle:</p>
<ul>
<li>It <em>looks</em> easy.</li>
<li>But the interactions are non trivial.</li>
<li>Requires <strong>planning, prediction, and experimentation</strong>.</li>
</ul>
<p>It’s also a <strong>great starter puzzle</strong> if you want to learn state management in React beyond <code>useState</code>.</p>
<h2><a href="#future-improvements" aria-hidden="true" class="anchor" id="future-improvements"></a>Future Improvements</h2>
<ul>
<li>Add solver to calculate optimal moves count</li>
<li>Track win history</li>
<li>Support larger grid sizes (e.g. 5x5).</li>
<li>Add sound or haptic feedback.</li>
</ul>
<h2><a href="#external-resources" aria-hidden="true" class="anchor" id="external-resources"></a>External Resources</h2>
<ul>
<li><a href="https://react.dev/learn/scaling-up-with-reducer-and-context">React: Scaling Up with Reducer and Context</a></li>
<li><a href="https://2048game.com/">2048 game</a> - UI inspiration</li>
</ul>
]]></content:encoded></item><item><title>Solving Boggle Backwards</title><link>https://letsreinventthewheel.github.io/blog/solving-boggle-backwards</link><description><![CDATA[<p>A simple Boggle solver that flips the problem on its head: instead of finding words
on the board, we check if dictionary words can be formed from the board. Surprisingly
simple, surprisingly effective.</p>
]]></description><author>Kontantin Saveljev</author><guid>https://letsreinventthewheel.github.io/blog/solving-boggle-backwards</guid><pubDate>Sat, 21 Jun 2025 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>This blog accompanies the video tutorial on building a Boggle solver that works in reverse…
and does it surprisingly well (for smaller board sizes; it won’t be as effective for a 100x100 board).
Instead of finding words <em>on</em> the board, it checks if each word <em>can</em> be formed from the board.</p>
<h2><a href="#what-youll-learn" aria-hidden="true" class="anchor" id="what-youll-learn"></a>What You’ll Learn</h2>
<ul>
<li>How to reverse the typical Boggle solving approach.</li>
<li>How to search for a word on a 2D board using recursion.</li>
<li>How brute force can be “good enough” with the right constraints.</li>
</ul>
<h2><a href="#project-code" aria-hidden="true" class="anchor" id="project-code"></a>Project Code</h2>
<p>You’ll find the complete source code here: <a href="https://github.com/letsreinventthewheel/simple-boggle-solver">simple-boggle-solver</a></p>
<h2><a href="#how-it-works" aria-hidden="true" class="anchor" id="how-it-works"></a>How It Works</h2>
<h3><a href="#the-idea" aria-hidden="true" class="anchor" id="the-idea"></a>The Idea</h3>
<p>Most Boggle solvers start with the board and try to construct words by exploring every path. We’re doing the opposite: for each word in the dictionary, we check if it can be found on the board.</p>
<h4><a href="#step-1-read-the-board" aria-hidden="true" class="anchor" id="step-1-read-the-board"></a>Step 1: Read the Board</h4>
<p>We represent the board as a <code>Dict[Position, str]</code>. We pass it to our solver as a single string of length <code>board_size * board_size</code></p>
<pre class="language-python"><span class="source python"><span class="meta function python"><span class="storage type function python"><span class="keyword declaration function python">def</span></span> <span class="entity name function python"><span class="meta generic-name python">build_board</span></span></span><span class="meta function parameters python"><span class="punctuation section parameters begin python">(</span></span><span class="meta function parameters python"><span class="variable parameter python">board_str</span></span><span class="meta function parameters annotation python"><span class="punctuation separator annotation parameter python">:</span> <span class="meta qualified-name python"><span class="support type python">str</span></span></span><span class="meta function parameters python"><span class="punctuation section parameters end python">)</span></span><span class="meta function python"> </span><span class="meta function annotation return python"><span class="punctuation separator annotation return python">-&gt;</span> <span class="meta qualified-name python"><span class="meta generic-name python">Board</span></span></span><span class="meta function python"><span class="punctuation section function begin python">:</span></span>
    <span class="keyword control flow return python">return</span> <span class="meta mapping-or-set python"><span class="punctuation section mapping-or-set begin python">{</span>
        <span class="meta sequence tuple python"><span class="punctuation section sequence begin python">(</span><span class="meta qualified-name python"><span class="meta generic-name python">i</span></span> <span class="keyword operator arithmetic python">/</span><span class="keyword operator arithmetic python">/</span> <span class="meta qualified-name python"><span class="variable other constant python">BOARD_SIZE</span></span><span class="punctuation separator sequence python">,</span> <span class="meta qualified-name python"><span class="meta generic-name python">i</span></span> <span class="keyword operator arithmetic python">%</span> <span class="meta qualified-name python"><span class="variable other constant python">BOARD_SIZE</span></span><span class="punctuation section sequence end python">)</span></span><span class="punctuation separator mapping key-value python">:</span></span><span class="meta mapping python">
        </span><span class="meta mapping value python"><span class="meta item-access python"><span class="meta qualified-name python"><span class="meta generic-name python">board_str</span></span></span><span class="meta item-access python"><span class="punctuation section brackets begin python">[</span></span><span class="meta item-access arguments python"><span class="meta qualified-name python"><span class="meta generic-name python">i</span></span></span><span class="meta item-access python"><span class="punctuation section brackets end python">]</span></span></span><span class="meta mapping python"> <span class="meta expression generator python"><span class="keyword control loop for generator python">for</span> <span class="meta generic-name python">i</span> <span class="keyword control loop for in python">in</span></span> <span class="meta function-call python"><span class="meta qualified-name python"><span class="variable function python"><span class="support function builtin python">range</span></span></span></span><span class="meta function-call arguments python"><span class="punctuation section arguments begin python">(</span><span class="meta qualified-name python"><span class="variable other constant python">BOARD_SIZE</span></span> <span class="keyword operator arithmetic python">*</span> <span class="meta qualified-name python"><span class="variable other constant python">BOARD_SIZE</span></span><span class="punctuation section arguments end python">)</span></span>
    <span class="punctuation section mapping end python">}</span></span>
</span></code></pre>
<hr />
<h4><a href="#step-2-load-the-dictionary" aria-hidden="true" class="anchor" id="step-2-load-the-dictionary"></a>Step 2: Load the Dictionary</h4>
<p>We use <code>/usr/share/dict/words</code> and filter out anything too short or capitalized or hyphenated</p>
<pre class="language-python"><span class="source python"><span class="meta qualified-name python"><span class="meta generic-name python">dictionary</span></span> <span class="keyword operator assignment python">=</span> <span class="meta sequence list python"><span class="punctuation section sequence begin python">[</span>
    <span class="meta function-call python"><span class="meta qualified-name python"><span class="meta generic-name python">w</span></span><span class="meta qualified-name python"><span class="punctuation accessor dot python">.</span></span><span class="meta qualified-name python"><span class="variable function python"><span class="meta generic-name python">strip</span></span></span></span><span class="meta function-call arguments python"><span class="punctuation section arguments begin python">(</span><span class="punctuation section arguments end python">)</span></span><span class="meta function-call python"><span class="meta qualified-name python"><span class="punctuation accessor dot python">.</span></span><span class="meta qualified-name python"><span class="variable function python"><span class="meta generic-name python">lower</span></span></span></span><span class="meta function-call arguments python"><span class="punctuation section arguments begin python">(</span><span class="punctuation section arguments end python">)</span></span>
    <span class="meta expression generator python"><span class="keyword control loop for generator python">for</span> <span class="meta generic-name python">w</span> <span class="keyword control loop for in python">in</span></span> <span class="meta qualified-name python"><span class="meta generic-name python">f</span></span>
    <span class="keyword control conditional if python">if</span> <span class="meta function-call python"><span class="meta qualified-name python"><span class="variable function python"><span class="support function builtin python">len</span></span></span></span><span class="meta function-call arguments python"><span class="punctuation section arguments begin python">(</span><span class="meta function-call python"><span class="meta qualified-name python"><span class="meta generic-name python">w</span></span><span class="meta qualified-name python"><span class="punctuation accessor dot python">.</span></span><span class="meta qualified-name python"><span class="variable function python"><span class="meta generic-name python">strip</span></span></span></span><span class="meta function-call arguments python"><span class="punctuation section arguments begin python">(</span><span class="punctuation section arguments end python">)</span></span><span class="punctuation section arguments end python">)</span></span> <span class="keyword operator comparison python">&gt;</span> <span class="constant numeric integer decimal python">2</span> <span class="keyword operator logical python">and</span> <span class="meta function-call python"><span class="meta qualified-name python"><span class="meta generic-name python">w</span></span><span class="meta qualified-name python"><span class="punctuation accessor dot python">.</span></span><span class="meta qualified-name python"><span class="variable function python"><span class="meta generic-name python">strip</span></span></span></span><span class="meta function-call arguments python"><span class="punctuation section arguments begin python">(</span><span class="punctuation section arguments end python">)</span></span><span class="meta function-call python"><span class="meta qualified-name python"><span class="punctuation accessor dot python">.</span></span><span class="meta qualified-name python"><span class="variable function python"><span class="meta generic-name python">isalpha</span></span></span></span><span class="meta function-call arguments python"><span class="punctuation section arguments begin python">(</span><span class="punctuation section arguments end python">)</span></span> <span class="keyword operator logical python">and</span> <span class="meta function-call python"><span class="meta qualified-name python"><span class="meta generic-name python">w</span></span><span class="meta qualified-name python"><span class="punctuation accessor dot python">.</span></span><span class="meta qualified-name python"><span class="variable function python"><span class="meta generic-name python">strip</span></span></span></span><span class="meta function-call arguments python"><span class="punctuation section arguments begin python">(</span><span class="punctuation section arguments end python">)</span></span><span class="meta function-call python"><span class="meta qualified-name python"><span class="punctuation accessor dot python">.</span></span><span class="meta qualified-name python"><span class="variable function python"><span class="meta generic-name python">islower</span></span></span></span><span class="meta function-call arguments python"><span class="punctuation section arguments begin python">(</span><span class="punctuation section arguments end python">)</span></span>
<span class="punctuation section sequence end python">]</span></span>
</span></code></pre>
<hr />
<h4><a href="#step-3-try-every-word" aria-hidden="true" class="anchor" id="step-3-try-every-word"></a>Step 3: Try Every Word</h4>
<p>We scan each word in the dictionary and check if it can be formed on the board, using a recursive backtracking function that searches from every matching first letter.</p>
<pre class="language-python"><span class="source python"><span class="meta function python"><span class="storage type function python"><span class="keyword declaration function python">def</span></span> <span class="entity name function python"><span class="meta generic-name python">solve</span></span></span><span class="meta function parameters python"><span class="punctuation section parameters begin python">(</span></span><span class="meta function parameters python"><span class="variable parameter python">board_str</span><span class="punctuation separator parameters python">,</span> <span class="variable parameter python">dictionary</span><span class="punctuation section parameters end python">)</span></span><span class="meta function python"><span class="punctuation section function begin python">:</span></span>
    <span class="constant language python">...</span>
    <span class="keyword control flow return python">return</span> <span class="meta sequence list python"><span class="punctuation section sequence begin python">[</span><span class="meta qualified-name python"><span class="meta generic-name python">w</span></span> <span class="meta expression generator python"><span class="keyword control loop for generator python">for</span> <span class="meta generic-name python">w</span> <span class="keyword control loop for in python">in</span></span> <span class="meta qualified-name python"><span class="meta generic-name python">candidates</span></span> <span class="keyword control conditional if python">if</span> <span class="meta function-call python"><span class="meta qualified-name python"><span class="variable function python"><span class="meta generic-name python">board_has_word</span></span></span></span><span class="meta function-call arguments python"><span class="punctuation section arguments begin python">(</span><span class="meta qualified-name python"><span class="meta generic-name python">board</span></span><span class="punctuation separator arguments python">,</span> <span class="meta qualified-name python"><span class="meta generic-name python">w</span></span><span class="punctuation section arguments end python">)</span></span><span class="punctuation section sequence end python">]</span></span>
</span></code></pre>
<hr />
<h4><a href="#step-4-report-matches" aria-hidden="true" class="anchor" id="step-4-report-matches"></a>Step 4: Report Matches</h4>
<p>Print all valid words found and sort by length or score.</p>
<hr />
<h2><a href="#external-resources" aria-hidden="true" class="anchor" id="external-resources"></a>External Resources</h2>
<ul>
<li><a href="https://manpages.debian.org/stretch/bsdgames/boggle.6">BSDGames Boggle Source</a></li>
<li><a href="https://realpython.com/python-thinking-recursively/">Recursion in Python</a></li>
<li><a href="https://en.wikipedia.org/wiki/Depth-first_search">Depth First Search</a></li>
</ul>
<h2><a href="#stay-in-the-loop" aria-hidden="true" class="anchor" id="stay-in-the-loop"></a>Stay in the Loop</h2>
<p>Have questions or ideas for more coding adventures?
Drop a comment on the video, or suggest the next project idea you want to reinvent!</p>
<p>Thanks for following along, and until next time. Keep reinventing!</p>
]]></content:encoded></item><item><title>Terminal Rainbows in Zig: A Colorful cat-like Tool</title><link>https://letsreinventthewheel.github.io/blog/lolcat</link><description><![CDATA[<p>A small learning project that explores how tools like <code>lolcat</code> create colorful
and animated terminal output. This time we use Zig for the first time to add some
color to our terminal and learn how ANSI escape codes make it all work.</p>
]]></description><author>Kontantin Saveljev</author><guid>https://letsreinventthewheel.github.io/blog/lolcat</guid><pubDate>Tue, 17 Jun 2025 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>Welcome back to <em>Let’s Reinvent the Wheel</em>.
In this project, we explore how terminal text effects like rainbow coloring and simple animation work.
We build a tiny silly Zig program that prints colorful text from stdin.</p>
<h2><a href="#what-youll-learn" aria-hidden="true" class="anchor" id="what-youll-learn"></a>What You’ll Learn</h2>
<p>This project is all about exploring how colorful terminal output works:</p>
<ul>
<li>How to manually generate ANSI escape codes for 24 bit color</li>
<li>How to apply RGB gradients across characters</li>
<li>How to read and process stdin in Zig</li>
<li>How to animate terminal output using carriage returns and redraws</li>
</ul>
<p>We implement all of this with Zig’s standard library, keeping the code small, clean, and educational.</p>
<h2><a href="#project-code" aria-hidden="true" class="anchor" id="project-code"></a>Project Code</h2>
<p>You’ll find the complete source code here: <a href="https://github.com/letsreinventthewheel/silly-cat">silly-cat</a></p>
<h3><a href="#how-it-works" aria-hidden="true" class="anchor" id="how-it-works"></a>How It Works</h3>
<h4><a href="#reading-input-from-stdin" aria-hidden="true" class="anchor" id="reading-input-from-stdin"></a>Reading Input from Stdin</h4>
<p><code>silly-cat</code> reads from standard input line by line using Zig’s <code>streamUntilDelimiter</code>, capturing one line at a time into a buffer:</p>
<pre class="language-zig"><span class="source zig"><span class="variable zig">reader</span>.<span class="variable function zig">streamUntilDelimiter</span><span class="punctuation section parens begin zig">(</span><span class="variable zig">fbs</span>.<span class="variable function zig">writer</span><span class="punctuation section parens begin zig">(</span><span class="punctuation section parens end zig">)</span><span class="punctuation separator zig">,</span> <span class="string quoted single zig">&#39;<span class="constant character escape newline zig">\n</span>&#39;</span><span class="punctuation separator zig">,</span> <span class="variable zig">fbs</span>.<span class="variable zig">buffer</span>.<span class="variable zig">len</span><span class="punctuation section parens end zig">)</span>
</span></code></pre>
<p>This makes it compatible with piped input like:</p>
<pre class="language-sh"><span class="source shell bash"><span class="meta function-call shell"><span class="support function echo shell">echo</span></span><span class="meta function-call arguments shell"> <span class="string quoted double shell"><span class="punctuation definition string begin shell">&quot;</span>hello world<span class="punctuation definition string end shell">&quot;</span></span></span> <span class="keyword operator logical pipe shell">|</span> <span class="meta function-call shell"><span class="variable function shell">silly-cat</span></span>
</span></code></pre>
<p>Each line is processed independently, with a short delay between lines to support the animation effect.</p>
<hr />
<h4><a href="#generating-rainbow-colors" aria-hidden="true" class="anchor" id="generating-rainbow-colors"></a>Generating Rainbow Colors</h4>
<p>For every character on the line, <code>silly-cat</code> calculates a rainbow color using a sine wave offset:</p>
<pre class="language-zig"><span class="source zig"><span class="storage modifier zig">const</span> <span class="variable zig">red</span>   <span class="keyword operator assignment zig">=</span> <span class="support function zig">@sin</span><span class="punctuation section parens begin zig">(</span><span class="variable zig">p</span> <span class="keyword operator arithmetic zig">/</span> <span class="constant numeric float zig">10.0</span><span class="punctuation section parens end zig">)</span> <span class="keyword operator arithmetic zig">*</span> <span class="constant numeric float zig">127.0</span> <span class="keyword operator arithmetic zig">+</span> <span class="constant numeric float zig">128.0</span><span class="punctuation terminator zig">;</span>
<span class="storage modifier zig">const</span> <span class="variable zig">green</span> <span class="keyword operator assignment zig">=</span> <span class="support function zig">@sin</span><span class="punctuation section parens begin zig">(</span><span class="variable zig">p</span> <span class="keyword operator arithmetic zig">/</span> <span class="constant numeric float zig">10.0</span> <span class="keyword operator arithmetic zig">+</span> 2π<span class="keyword operator arithmetic zig">/</span><span class="constant numeric integer zig">3</span><span class="punctuation section parens end zig">)</span> <span class="keyword operator arithmetic zig">*</span> <span class="constant numeric float zig">127.0</span> <span class="keyword operator arithmetic zig">+</span> <span class="constant numeric float zig">128.0</span><span class="punctuation terminator zig">;</span>
<span class="storage modifier zig">const</span> <span class="variable zig">blue</span>  <span class="keyword operator assignment zig">=</span> <span class="support function zig">@sin</span><span class="punctuation section parens begin zig">(</span><span class="variable zig">p</span> <span class="keyword operator arithmetic zig">/</span> <span class="constant numeric float zig">10.0</span> <span class="keyword operator arithmetic zig">+</span> 4π<span class="keyword operator arithmetic zig">/</span><span class="constant numeric integer zig">3</span><span class="punctuation section parens end zig">)</span> <span class="keyword operator arithmetic zig">*</span> <span class="constant numeric float zig">127.0</span> <span class="keyword operator arithmetic zig">+</span> <span class="constant numeric float zig">128.0</span><span class="punctuation terminator zig">;</span>
</span></code></pre>
<p>This produces a smooth hue transition across characters, giving it a “rainbow stream” appearance.</p>
<p>The <code>position</code> of the character and a global <code>offset</code> (which changes slightly between lines) are used to animate the color wave over time.</p>
<hr />
<h4><a href="#writing-colored-output" aria-hidden="true" class="anchor" id="writing-colored-output"></a>Writing Colored Output</h4>
<p>Each character is wrapped with a 24 bit ANSI color escape sequence:</p>
<pre class="language-zig"><span class="source zig"><span class="keyword control conditional zig">try</span> <span class="variable zig">writer</span>.<span class="variable function zig">print</span><span class="punctuation section parens begin zig">(</span><span class="string quoted double zig">&quot;<span class="constant character escape hexidecimal zig">\x1b</span>[38;2;{d};{d};{d}m{c}&quot;</span><span class="punctuation separator zig">,</span> .<span class="punctuation section braces begin zig">{</span> <span class="variable zig">color</span>.<span class="variable zig">r</span><span class="punctuation separator zig">,</span> <span class="variable zig">color</span>.<span class="variable zig">g</span><span class="punctuation separator zig">,</span> <span class="variable zig">color</span>.<span class="variable zig">b</span><span class="punctuation separator zig">,</span> <span class="variable zig">c</span> <span class="punctuation section braces end zig">}</span><span class="punctuation section parens end zig">)</span><span class="punctuation terminator zig">;</span>
</span></code></pre>
<p>At the end of each line, it resets the color with <code>\x1b[0m</code>.</p>
<p>The cursor is hidden at the start (<code>\x1b[?25l</code>) to reduce flicker during animation, and re-shown at the end (<code>\x1b[?25h</code>).</p>
<hr />
<h4><a href="#animation-control" aria-hidden="true" class="anchor" id="animation-control"></a>Animation Control</h4>
<p>The animation is handled by a short sleep (<code>std.time.sleep</code>) between line renders, combined with a moving <code>offset</code> in the color calculation.
This creates a subtle horizontal shimmer effect across multiple lines.</p>
<h2><a href="#tweak-and-expand" aria-hidden="true" class="anchor" id="tweak-and-expand"></a>Tweak and Expand</h2>
<ul>
<li><strong>UTF-8 support</strong>: Right now, the code assumes single byte ASCII characters. Supporting multibyte UTF-8 characters (like emojis or accented letters) requires iterating over codepoints correctly.</li>
<li><strong>File input</strong>: Currently, input is read only from stdin. Add support for reading from files (via command line arguments).</li>
<li><strong>Multiple animation styles</strong>: You could implement vertical “wiggle”, character jitter, or scrolling.</li>
<li><strong>Custom gradients</strong>: Try using HSV interpolation, or let users pass in a color palette.</li>
</ul>
<h2><a href="#external-resources" aria-hidden="true" class="anchor" id="external-resources"></a>External Resources</h2>
<ul>
<li><a href="https://notes.burke.libbey.me/ansi-escape-codes/">Everything you never wanted to know about ANSI escape codes</a></li>
<li><a href="https://gist.github.com/fnky/458719343aabd01cfb17a3a4f7296797">ANSI Escape Codes GIST</a></li>
<li><a href="https://github.com/busyloop/lolcat">lolcat</a> - a terminal colorizer that inspired this project</li>
<li><a href="https://graphtoy.com/">graphtoy</a> - easy graphing of functions</li>
<li><a href="https://ziglang.org/documentation/master/">Zig language documentation</a></li>
</ul>
]]></content:encoded></item><item><title>Doom Fire Animation with PPM and mpv</title><link>https://letsreinventthewheel.github.io/blog/doom-fire-animation</link><description><![CDATA[<p>Learn how to create a mesmerizing Doom Fire animation from scratch in C11, using
only the PPM image format and mpv for display. This hands-on tutorial walks you
through simulating classic pixel fire in a modern C environment, without any graphics
libraries - just raw image output and a powerful video player.</p>
]]></description><author>Kontantin Saveljev</author><guid>https://letsreinventthewheel.github.io/blog/doom-fire-animation</guid><pubDate>Fri, 30 May 2025 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>Welcome back to <em>Let’s Reinvent the Wheel</em>.
In this project, we bring the iconic “Doom Fire” animation to life using pure C11, the simplest PPM image format, and <a href="https://mpv.io/">mpv</a> as our display engine. If you want to make fire on your terminal with <em>zero</em> dependencies beyond your compiler and a media player, this is the perfect starting point.</p>
<hr />
<h2><a href="#what-youll-learn" aria-hidden="true" class="anchor" id="what-youll-learn"></a>What You’ll Learn</h2>
<p>In this episode, you will:</p>
<ul>
<li>Explore the <strong>Doom Fire</strong> algorithm and how it works</li>
<li>Implement a full simulation loop in modern <strong>C11</strong></li>
<li>Use the portable <a href="https://en.wikipedia.org/wiki/Netpbm_format#PPM_example">PPM (P6)</a> format to output images frame by frame</li>
<li>Pipe your animation directly into <code>mpv</code> to display it (no windowing or GUI required)</li>
<li>Tweak parameters to create pixel perfect retro effects, or scale up for a modern, high resolution blaze</li>
</ul>
<p>By the end, you’ll have a pixel fire demo that’s blazing on your screen and ready for further hacks (all of that without touching any graphics libraries).</p>
<hr />
<h2><a href="#project-code" aria-hidden="true" class="anchor" id="project-code"></a>Project Code</h2>
<p>You’ll find the complete source code here: <a href="https://github.com/letsreinventthewheel/doomfire">doomfire</a></p>
<h3><a href="#how-it-works" aria-hidden="true" class="anchor" id="how-it-works"></a><strong>How it works:</strong></h3>
<ul>
<li><strong>Simulate</strong> a fire buffer where each pixel’s intensity is updated using random decay and spreading.</li>
<li><strong>Render</strong> each frame as a raw PPM (P6) image, writing directly to stdout.</li>
<li><strong>Display</strong> in real time by piping your program’s output to <code>mpv</code>, which interprets the image stream as a video.</li>
</ul>
<p><strong>To run:</strong></p>
<pre class="language-sh"><span class="source shell bash"><span class="meta function-call shell"><span class="variable function shell">gcc</span></span><span class="meta function-call arguments shell"><span class="variable parameter option shell"><span class="punctuation definition parameter shell"> -</span>std</span><span class="keyword operator assignment option shell">=</span>c11<span class="variable parameter option shell"><span class="punctuation definition parameter shell"> -</span>O3</span><span class="variable parameter option shell"><span class="punctuation definition parameter shell"> -</span>o</span> doomfire doomfire.c</span>
<span class="meta function-call shell"><span class="variable function shell">./doomfire</span></span> <span class="keyword operator logical pipe shell">|</span> <span class="meta function-call shell"><span class="variable function shell">mpv</span></span><span class="meta function-call arguments shell"> -</span>
</span></code></pre>
<blockquote>
<p>No graphics dependencies, no window management - only <code>mpv</code> as <a href="https://en.wikipedia.org/wiki/Most_valuable_player">MVP</a></p>
</blockquote>
<hr />
<h2><a href="#tweak-and-expand" aria-hidden="true" class="anchor" id="tweak-and-expand"></a>Tweak and Expand</h2>
<ul>
<li>Adjust fire size, scaling, and palette to match your aesthetic.</li>
<li>Overlay fire onto other images, or add simple alpha blending for cool effects.</li>
<li>Try increasing the scale factor for a more “blocky” fire, or experiment with different color palettes.</li>
</ul>
<hr />
<h2><a href="#external-resources" aria-hidden="true" class="anchor" id="external-resources"></a>External Resources</h2>
<p>If you want to dig deeper, check out these resources:</p>
<ul>
<li><a href="https://netpbm.sourceforge.net/doc/ppm.html">PPM Format Documentation</a></li>
<li><a href="https://fabiensanglard.net/doom_fire_psx/">How Doom Fire Was Done</a></li>
<li><a href="https://mpv.io/manual/master/">mpv User Guide</a></li>
</ul>
<hr />
<h2><a href="#stay-in-the-loop" aria-hidden="true" class="anchor" id="stay-in-the-loop"></a>Stay in the Loop</h2>
<p>Have questions or ideas for more coding adventures?
Drop a comment on the video, or suggest the next project idea you want to reinvent!</p>
<p>Thanks for following along, and until next time. Keep reinventing!</p>
]]></content:encoded></item><item><title>Build Your Own RoyalRoad to EPUB Converter</title><link>https://letsreinventthewheel.github.io/blog/royal-road-to-epub</link><description><![CDATA[<p>Learn how to build a simple Python script that scrapes stories from RoyalRoad
and converts them into EPUB files for offline reading. This beginner friendly
project uses <code>BeautifulSoup</code>, <code>requests</code>, and <code>EbookLib</code> to walk you through a
full pipeline from HTML scraping to ebook generation. A perfect start for anyone
looking to automate something useful.</p>
]]></description><author>Kontantin Saveljev</author><guid>https://letsreinventthewheel.github.io/blog/royal-road-to-epub</guid><pubDate>Sat, 24 May 2025 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>Welcome back to <em>Let’s Reinvent the Wheel</em>. In our first hands-on project, we build
a Python-based tool that lets you scrape <a href="https://www.royalroad.com">RoyalRoad</a> stories and convert them into
EPUB files. Perfect for offline reading on e-readers.</p>
<p>This project is aimed at beginner-to-intermediate developers looking to sharpen their
skills while creating something genuinely useful. As a result we get a tiny tool, which
leans on a few powerful libraries like <code>requests</code>, <code>BeautifulSoup</code>, and <code>EbookLib</code>.</p>
<h2><a href="#what-youll-learn" aria-hidden="true" class="anchor" id="what-youll-learn"></a>What You’ll Learn</h2>
<p>In this episode, we:</p>
<ul>
<li>Analyze the HTML structure of <a href="https://www.royalroad.com">RoyalRoad</a> story pages</li>
<li>Use <code>requests</code> to fetch page content</li>
<li>Extract and clean data with <code>BeautifulSoup</code></li>
<li>Format chapters and metadata for EPUB generation</li>
<li>Use <code>EbookLib</code> to output a polished .epub file</li>
<li>Package everything into a script you can reuse or extend</li>
</ul>
<p>This is a full walkthrough of a minimal but complete content pipeline - scraping to final EPUB.</p>
<h2><a href="#project-code" aria-hidden="true" class="anchor" id="project-code"></a>Project Code</h2>
<p>The full source code is available here: <a href="https://github.com/letsreinventthewheel/royalroad2epub">royalroad2epub</a></p>
<h2><a href="#documentation" aria-hidden="true" class="anchor" id="documentation"></a>Documentation</h2>
<p>These are helpful docs of the libraries which we used in this video:</p>
<ul>
<li><a href="https://requests.readthedocs.io/en/latest/">Requests documentation</a></li>
<li><a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/">BeautifulSoup documentation</a></li>
<li><a href="https://docs.sourcefabric.org/projects/ebooklib/en/latest/tutorial.html#creating-epub">EbookLib documentation</a></li>
</ul>
<h2><a href="#stay-in-the-loop" aria-hidden="true" class="anchor" id="stay-in-the-loop"></a>Stay in the Loop</h2>
<p>Have questions, ideas, or something you’d like me to reinvent next? Drop a comment on the video!</p>
<p>Thanks for watching, and until next time. Keep reinventing!</p>
]]></content:encoded></item><item><title>The Start of Something New</title><link>https://letsreinventthewheel.github.io/blog/intro-post</link><description><![CDATA[<p>Let’s Reinvent the Wheel is all about learning by building from scratch.
We’re starting with an empty GitHub and LeetCode profile, exploring backend,
frontend, and interview prep. The goal is to recreate existing tools and ideas
to truly understand how they work. No fixed roadmap — just hands-on projects
that challenge and teach</p>
]]></description><author>Kontantin Saveljev</author><guid>https://letsreinventthewheel.github.io/blog/intro-post</guid><pubDate>Wed, 21 May 2025 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>There’s only one way to truly understand how things work: <strong>build them yourself</strong>.</p>
<p>That’s what this journey is all about. We’re here to learn, inspect, and recreate
existing tools, libraries, and ideas - not just for the sake of it, but to build
real knowledge. And along the way, we’re going to document everything, growing a
GitHub profile that is a collection of all sorts of projects, a showcase of what
we’ve learned and built. A portfolio that could, one day, help land a job.</p>
<p>But right now? <strong>We’re starting from zero</strong>.</p>
<ul>
<li>📂 No repositories.</li>
<li>📝 No solved LeetCode problems.</li>
<li>🛠️ No half-finished projects.</li>
</ul>
<p>Just a blank slate and an open-ended path forward.</p>
<h2><a href="#what-this-is-all-about" aria-hidden="true" class="anchor" id="what-this-is-all-about"></a>What This Is All About</h2>
<p><em>Let’s Reinvent the Wheel</em> isn’t about following a fixed roadmap or gradually increasing
difficulty. Some projects will be simple, others more complex. One day, we might build a
tiny utility. Another day, we could dive deep into a couple month long project.</p>
<p>We’re not locked into a single vertical - sometimes we’ll be in backend, other times frontend,
sometimes we’ll explore what it’s like to prepare for technical interviews using LeetCode.
After all, one of our goals with this GitHub journey is to create a strong profile that
could actually help us land a job.</p>
<p>And here’s something important: <strong>we’re not trying to invent brand-new things</strong>. A lot of what
we’ll build will be inspired by or directly rebuilt based on existing work. Because the best
way to truly understand something is to take it apart and rebuild it yourself.</p>
<h2><a href="#how-we-approach-this" aria-hidden="true" class="anchor" id="how-we-approach-this"></a>How We Approach This</h2>
<ul>
<li>Not just “what” but “how” and “why”. We’re here to understand what we write, not just follow tutorials.</li>
<li>No single track. Backend, frontend, problem-solving, automation - whatever interests us, we’ll explore.</li>
<li>We stand on the shoulders of giants. Our projects won’t always be original, and that’s the point.</li>
</ul>
<h2><a href="#the-journey-starts-now" aria-hidden="true" class="anchor" id="the-journey-starts-now"></a>The Journey Starts Now</h2>
<p>From here, we jump right in. No predefined order, no rigid path - just a series of projects
that challenge, teach, and (hopefully) inspire.</p>
<p>If that sounds like your kind of thing, <strong>subscribe</strong>, check out the blog, and let’s start building.</p>
<p><em>Let’s Reinvent the Wheel</em> - not because we have to, but because we want to 🚀</p>
]]></content:encoded></item></channel></rss>
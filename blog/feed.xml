<?xml version="1.0" encoding="utf-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Let&apos;s Reinvent the Wheel</title><link>https://letsreinventthewheel.github.io</link><description>Let&apos;s Reinvent the Wheel: a companion space to my YouTube channel</description><language>en-us</language><copyright>2025 Let&apos;s Reinvent the Wheel</copyright><managingEditor>letsreinventthewheelyt@gmail.com</managingEditor><webMaster>letsreinventthewheelyt@gmail.com</webMaster><lastBuildDate>Thu, 29 May 2025 23:07:04 +0000</lastBuildDate><item><title>Doom Fire Animation with PPM and mpv</title><link>https://letsreinventthewheel.github.io/blog/doom-fire-animation</link><description><![CDATA[<p>Learn how to create a mesmerizing Doom Fire animation from scratch in C11, using
only the PPM image format and mpv for display. This hands-on tutorial walks you
through simulating classic pixel fire in a modern C environment, without any graphics
libraries - just raw image output and a powerful video player.</p>
]]></description><author>Kontantin Saveljev</author><guid>https://letsreinventthewheel.github.io/blog/doom-fire-animation</guid><pubDate>Fri, 30 May 2025 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>Welcome back to <em>Let‚Äôs Reinvent the Wheel</em>.
In this project, we bring the iconic ‚ÄúDoom Fire‚Äù animation to life using pure C11, the simplest PPM image format, and <a href="https://mpv.io/">mpv</a> as our display engine. If you want to make fire on your terminal with <em>zero</em> dependencies beyond your compiler and a media player, this is the perfect starting point.</p>
<hr />
<h2><a href="#what-youll-learn" aria-hidden="true" class="anchor" id="what-youll-learn"></a>What You‚Äôll Learn</h2>
<p>In this episode, you will:</p>
<ul>
<li>Explore the <strong>Doom Fire</strong> algorithm and how it works</li>
<li>Implement a full simulation loop in modern <strong>C11</strong></li>
<li>Use the portable <a href="https://en.wikipedia.org/wiki/Netpbm_format#PPM_example">PPM (P6)</a> format to output images frame by frame</li>
<li>Pipe your animation directly into <code>mpv</code> to display it (no windowing or GUI required)</li>
<li>Tweak parameters to create pixel perfect retro effects, or scale up for a modern, high resolution blaze</li>
</ul>
<p>By the end, you‚Äôll have a pixel fire demo that‚Äôs blazing on your screen and ready for further hacks (all of that without touching any graphics libraries).</p>
<hr />
<h2><a href="#project-code" aria-hidden="true" class="anchor" id="project-code"></a>Project Code</h2>
<p>You‚Äôll find the complete source code here: <a href="https://github.com/letsreinventthewheel/doomfire">doomfire</a></p>
<h3><a href="#how-it-works" aria-hidden="true" class="anchor" id="how-it-works"></a><strong>How it works:</strong></h3>
<ul>
<li><strong>Simulate</strong> a fire buffer where each pixel‚Äôs intensity is updated using random decay and spreading.</li>
<li><strong>Render</strong> each frame as a raw PPM (P6) image, writing directly to stdout.</li>
<li><strong>Display</strong> in real time by piping your program‚Äôs output to <code>mpv</code>, which interprets the image stream as a video.</li>
</ul>
<p><strong>To run:</strong></p>
<pre class="language-sh"><span class="source shell bash"><span class="meta function-call shell"><span class="variable function shell">gcc</span></span><span class="meta function-call arguments shell"><span class="variable parameter option shell"><span class="punctuation definition parameter shell"> -</span>std</span><span class="keyword operator assignment option shell">=</span>c11<span class="variable parameter option shell"><span class="punctuation definition parameter shell"> -</span>O3</span><span class="variable parameter option shell"><span class="punctuation definition parameter shell"> -</span>o</span> doomfire doomfire.c</span>
<span class="meta function-call shell"><span class="variable function shell">./doomfire</span></span> <span class="keyword operator logical pipe shell">|</span> <span class="meta function-call shell"><span class="variable function shell">mpv</span></span><span class="meta function-call arguments shell"> -</span>
</span></code></pre>
<blockquote>
<p>No graphics dependencies, no window management - only <code>mpv</code> as <a href="https://en.wikipedia.org/wiki/Most_valuable_player">MVP</a></p>
</blockquote>
<hr />
<h2><a href="#tweak-and-expand" aria-hidden="true" class="anchor" id="tweak-and-expand"></a>Tweak and Expand</h2>
<ul>
<li>Adjust fire size, scaling, and palette to match your aesthetic.</li>
<li>Overlay fire onto other images, or add simple alpha blending for cool effects.</li>
<li>Try increasing the scale factor for a more ‚Äúblocky‚Äù fire, or experiment with different color palettes.</li>
</ul>
<hr />
<h2><a href="#external-resources" aria-hidden="true" class="anchor" id="external-resources"></a>External Resources</h2>
<p>If you want to dig deeper, check out these resources:</p>
<ul>
<li><a href="https://netpbm.sourceforge.net/doc/ppm.html">PPM Format Documentation</a></li>
<li><a href="https://fabiensanglard.net/doom_fire_psx/">How Doom Fire Was Done</a></li>
<li><a href="https://mpv.io/manual/master/">mpv User Guide</a></li>
</ul>
<hr />
<h2><a href="#stay-in-the-loop" aria-hidden="true" class="anchor" id="stay-in-the-loop"></a>Stay in the Loop</h2>
<p>Have questions or ideas for more coding adventures?
Drop a comment on the video, or suggest the next project idea you want to reinvent!</p>
<p>Thanks for following along, and until next time. Keep reinventing!</p>
]]></content:encoded></item><item><title>Build Your Own RoyalRoad to EPUB Converter</title><link>https://letsreinventthewheel.github.io/blog/royal-road-to-epub</link><description><![CDATA[<p>Learn how to build a simple Python script that scrapes stories from RoyalRoad
and converts them into EPUB files for offline reading. This beginner friendly
project uses <code>BeautifulSoup</code>, <code>requests</code>, and <code>EbookLib</code> to walk you through a
full pipeline from HTML scraping to ebook generation. A perfect start for anyone
looking to automate something useful.</p>
]]></description><author>Kontantin Saveljev</author><guid>https://letsreinventthewheel.github.io/blog/royal-road-to-epub</guid><pubDate>Sat, 24 May 2025 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>Welcome back to <em>Let‚Äôs Reinvent the Wheel</em>. In our first hands-on project, we build
a Python-based tool that lets you scrape <a href="https://www.royalroad.com">RoyalRoad</a> stories and convert them into
EPUB files. Perfect for offline reading on e-readers.</p>
<p>This project is aimed at beginner-to-intermediate developers looking to sharpen their
skills while creating something genuinely useful. As a result we get a tiny tool, which
leans on a few powerful libraries like <code>requests</code>, <code>BeautifulSoup</code>, and <code>EbookLib</code>.</p>
<h2><a href="#what-youll-learn" aria-hidden="true" class="anchor" id="what-youll-learn"></a>What You‚Äôll Learn</h2>
<p>In this episode, we:</p>
<ul>
<li>Analyze the HTML structure of <a href="https://www.royalroad.com">RoyalRoad</a> story pages</li>
<li>Use <code>requests</code> to fetch page content</li>
<li>Extract and clean data with <code>BeautifulSoup</code></li>
<li>Format chapters and metadata for EPUB generation</li>
<li>Use <code>EbookLib</code> to output a polished .epub file</li>
<li>Package everything into a script you can reuse or extend</li>
</ul>
<p>This is a full walkthrough of a minimal but complete content pipeline - scraping to final EPUB.</p>
<h2><a href="#project-code" aria-hidden="true" class="anchor" id="project-code"></a>Project Code</h2>
<p>The full source code is available here: <a href="https://github.com/letsreinventthewheel/royalroad2epub">royalroad2epub</a></p>
<h2><a href="#documentation" aria-hidden="true" class="anchor" id="documentation"></a>Documentation</h2>
<p>These are helpful docs of the libraries which we used in this video:</p>
<ul>
<li><a href="https://requests.readthedocs.io/en/latest/">Requests documentation</a></li>
<li><a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/">BeautifulSoup documentation</a></li>
<li><a href="https://docs.sourcefabric.org/projects/ebooklib/en/latest/tutorial.html#creating-epub">EbookLib documentation</a></li>
</ul>
<h2><a href="#stay-in-the-loop" aria-hidden="true" class="anchor" id="stay-in-the-loop"></a>Stay in the Loop</h2>
<p>Have questions, ideas, or something you‚Äôd like me to reinvent next? Drop a comment on the video!</p>
<p>Thanks for watching, and until next time. Keep reinventing!</p>
]]></content:encoded></item><item><title>The Start of Something New</title><link>https://letsreinventthewheel.github.io/blog/intro-post</link><description><![CDATA[<p>Let‚Äôs Reinvent the Wheel is all about learning by building from scratch.
We‚Äôre starting with an empty GitHub and LeetCode profile, exploring backend,
frontend, and interview prep. The goal is to recreate existing tools and ideas
to truly understand how they work. No fixed roadmap ‚Äî just hands-on projects
that challenge and teach</p>
]]></description><author>Kontantin Saveljev</author><guid>https://letsreinventthewheel.github.io/blog/intro-post</guid><pubDate>Wed, 21 May 2025 00:00:00 +0000</pubDate><content:encoded><![CDATA[<p>There‚Äôs only one way to truly understand how things work: <strong>build them yourself</strong>.</p>
<p>That‚Äôs what this journey is all about. We‚Äôre here to learn, inspect, and recreate
existing tools, libraries, and ideas - not just for the sake of it, but to build
real knowledge. And along the way, we‚Äôre going to document everything, growing a
GitHub profile that is a collection of all sorts of projects, a showcase of what
we‚Äôve learned and built. A portfolio that could, one day, help land a job.</p>
<p>But right now? <strong>We‚Äôre starting from zero</strong>.</p>
<ul>
<li>üìÇ No repositories.</li>
<li>üìù No solved LeetCode problems.</li>
<li>üõ†Ô∏è No half-finished projects.</li>
</ul>
<p>Just a blank slate and an open-ended path forward.</p>
<h2><a href="#what-this-is-all-about" aria-hidden="true" class="anchor" id="what-this-is-all-about"></a>What This Is All About</h2>
<p><em>Let‚Äôs Reinvent the Wheel</em> isn‚Äôt about following a fixed roadmap or gradually increasing
difficulty. Some projects will be simple, others more complex. One day, we might build a
tiny utility. Another day, we could dive deep into a couple month long project.</p>
<p>We‚Äôre not locked into a single vertical - sometimes we‚Äôll be in backend, other times frontend,
sometimes we‚Äôll explore what it‚Äôs like to prepare for technical interviews using LeetCode.
After all, one of our goals with this GitHub journey is to create a strong profile that
could actually help us land a job.</p>
<p>And here‚Äôs something important: <strong>we‚Äôre not trying to invent brand-new things</strong>. A lot of what
we‚Äôll build will be inspired by or directly rebuilt based on existing work. Because the best
way to truly understand something is to take it apart and rebuild it yourself.</p>
<h2><a href="#how-we-approach-this" aria-hidden="true" class="anchor" id="how-we-approach-this"></a>How We Approach This</h2>
<ul>
<li>Not just ‚Äúwhat‚Äù but ‚Äúhow‚Äù and ‚Äúwhy‚Äù. We‚Äôre here to understand what we write, not just follow tutorials.</li>
<li>No single track. Backend, frontend, problem-solving, automation - whatever interests us, we‚Äôll explore.</li>
<li>We stand on the shoulders of giants. Our projects won‚Äôt always be original, and that‚Äôs the point.</li>
</ul>
<h2><a href="#the-journey-starts-now" aria-hidden="true" class="anchor" id="the-journey-starts-now"></a>The Journey Starts Now</h2>
<p>From here, we jump right in. No predefined order, no rigid path - just a series of projects
that challenge, teach, and (hopefully) inspire.</p>
<p>If that sounds like your kind of thing, <strong>subscribe</strong>, check out the blog, and let‚Äôs start building.</p>
<p><em>Let‚Äôs Reinvent the Wheel</em> - not because we have to, but because we want to üöÄ</p>
]]></content:encoded></item></channel></rss>